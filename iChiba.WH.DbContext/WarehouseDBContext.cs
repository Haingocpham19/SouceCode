// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using iChiba.WH.Model;

namespace iChiba.WH.DbContext
{
    public partial class WarehouseDBContext : Microsoft.EntityFrameworkCore.DbContext
    {
        public WarehouseDBContext()
        {
        }

        public WarehouseDBContext(DbContextOptions<WarehouseDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AccountPostPcs> AccountPostPcs { get; set; }
        public virtual DbSet<BinLocation> BinLocation { get; set; }
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<CategoryGroup> CategoryGroup { get; set; }
        public virtual DbSet<Config> Config { get; set; }
        public virtual DbSet<Container> Container { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<EmsServiceCharge> EmsServiceCharge { get; set; }
        public virtual DbSet<EmsShippingState> EmsShippingState { get; set; }
        public virtual DbSet<Flight> Flight { get; set; }
        public virtual DbSet<Hawb> Hawb { get; set; }
        public virtual DbSet<Ingredient> Ingredient { get; set; }
        public virtual DbSet<Locations> Locations { get; set; }
        public virtual DbSet<Package> Package { get; set; }
        public virtual DbSet<PackageDetail> PackageDetail { get; set; }
        public virtual DbSet<PackageDetailMapping> PackageDetailMapping { get; set; }
        public virtual DbSet<PackageDetailQuote> PackageDetailQuote { get; set; }
        public virtual DbSet<PcsShippingState> PcsShippingState { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<ProductSample> ProductSample { get; set; }
        public virtual DbSet<ServiceCharge> ServiceCharge { get; set; }
        public virtual DbSet<ServiceChargePackageMapping> ServiceChargePackageMapping { get; set; }
        public virtual DbSet<Shipment> Shipment { get; set; }
        public virtual DbSet<ShipmentStatusHistory> ShipmentStatusHistory { get; set; }
        public virtual DbSet<ShippingRoute> ShippingRoute { get; set; }
        public virtual DbSet<ShippingRouteWarehouse> ShippingRouteWarehouse { get; set; }
        public virtual DbSet<VtpShippingState> VtpShippingState { get; set; }
        public virtual DbSet<Warehouse> Warehouse { get; set; }
        public virtual DbSet<WarehouseEmp> WarehouseEmp { get; set; }
        public virtual DbSet<WarningInfo> WarningInfo { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AccountPostPcs>(entity =>
            {
                entity.Property(e => e.ClientId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClientSecret)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayName).HasMaxLength(200);

                entity.Property(e => e.GrantType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Scope)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserName).HasMaxLength(100);

                entity.Property(e => e.WarehouseCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.AccountPostPcs)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("AccountPostPcs_FK");
            });

            modelBuilder.Entity<BinLocation>(entity =>
            {
                entity.Property(e => e.Column).HasDefaultValueSql("((0))");

                entity.Property(e => e.CountPackages).HasDefaultValueSql("((0))");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.Height)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Length)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MaximumPosition).HasDefaultValueSql("((0))");

                entity.Property(e => e.MaximumWeight).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MinimumWeight).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Row).HasDefaultValueSql("((0))");

                entity.Property(e => e.WarehouseCode)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Weight)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Width)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.ShippingRoute)
                    .WithMany(p => p.BinLocation)
                    .HasForeignKey(d => d.ShippingRouteId)
                    .HasConstraintName("FK_BinLocation_ShippingRoute");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.BinLocation)
                    .HasForeignKey(d => d.WarehouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BinLocation_Warehouse");
            });

            modelBuilder.Entity<Category>(entity =>
            {
                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(1024);

                entity.Property(e => e.Elements).HasMaxLength(1024);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(512);

                entity.Property(e => e.Title).HasMaxLength(255);

                entity.Property(e => e.TitleEn)
                    .HasColumnName("TitleEN")
                    .HasMaxLength(255);

                entity.Property(e => e.TitleJp)
                    .HasColumnName("TitleJP")
                    .HasMaxLength(255);

                entity.HasOne(d => d.CategoryGroup)
                    .WithMany(p => p.Category)
                    .HasForeignKey(d => d.CategoryGroupId)
                    .HasConstraintName("FK_Category_CategoryGroup");
            });

            modelBuilder.Entity<CategoryGroup>(entity =>
            {
                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(1024);

                entity.Property(e => e.DescriptionEn)
                    .HasColumnName("DescriptionEN")
                    .HasMaxLength(1024);

                entity.Property(e => e.DescriptionJp)
                    .HasColumnName("DescriptionJP")
                    .HasMaxLength(1024);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(512);

                entity.Property(e => e.NameEn)
                    .HasColumnName("NameEN")
                    .HasMaxLength(255);

                entity.Property(e => e.NameJp)
                    .HasColumnName("NameJP")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<Config>(entity =>
            {
                entity.HasKey(e => e.Key);

                entity.Property(e => e.Key)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Container>(entity =>
            {
                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CodeCustom).HasMaxLength(50);

                entity.Property(e => e.CrateWeight).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DimensionWeight).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Height).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.LastBinLocation)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Length).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Lock).HasDefaultValueSql("((0))");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(400);

                entity.Property(e => e.Region)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseCode).HasMaxLength(255);

                entity.Property(e => e.Weight).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Width).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.BinLocation)
                    .WithMany(p => p.Container)
                    .HasForeignKey(d => d.BinLocationId)
                    .HasConstraintName("FK_Container_BinLocation");

                entity.HasOne(d => d.Flight)
                    .WithMany(p => p.Container)
                    .HasForeignKey(d => d.FlightId)
                    .HasConstraintName("FK_Container_Flight");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.Container)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Container_Warehouse");
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(512);

                entity.Property(e => e.NameEn)
                    .HasColumnName("NameEN")
                    .HasMaxLength(255);

                entity.Property(e => e.NameJp)
                    .HasColumnName("NameJP")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<EmsServiceCharge>(entity =>
            {
                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<EmsShippingState>(entity =>
            {
                entity.Property(e => e.Datetime)
                    .HasColumnName("datetime")
                    .HasMaxLength(255);

                entity.Property(e => e.Locate)
                    .HasColumnName("locate")
                    .HasMaxLength(255);

                entity.Property(e => e.Note)
                    .HasColumnName("note")
                    .HasMaxLength(255);

                entity.Property(e => e.OrderCode)
                    .IsRequired()
                    .HasColumnName("order_code")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.StatusCode)
                    .IsRequired()
                    .HasColumnName("status_code")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.StatusName)
                    .HasColumnName("status_name")
                    .HasMaxLength(255);

                entity.Property(e => e.TotalWeight).HasColumnName("total_weight");

                entity.Property(e => e.TrackingCode)
                    .IsRequired()
                    .HasColumnName("tracking_code")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Transaction)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.HasOne(d => d.PackageDetailQuote)
                    .WithMany(p => p.EmsShippingState)
                    .HasForeignKey(d => d.PackageDetailQuoteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmsShippingState_Shipment");
            });

            modelBuilder.Entity<Flight>(entity =>
            {
                entity.Property(e => e.ActualWeight).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedWarehouseCode).HasMaxLength(255);

                entity.Property(e => e.DateArrival)
                    .HasColumnName("DateArrival ")
                    .HasColumnType("datetime");

                entity.Property(e => e.Departure)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Destination)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExploitCompletedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(400);

                entity.Property(e => e.WarehouseCode).HasMaxLength(255);

                entity.Property(e => e.Weight).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.WeightBulky).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<Hawb>(entity =>
            {
                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ExportCurrencyCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExportDuty)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExportNote).HasMaxLength(500);

                entity.Property(e => e.ExporterAddress).HasMaxLength(500);

                entity.Property(e => e.ExporterName).HasMaxLength(100);

                entity.Property(e => e.ExporterPersonInCharge).HasMaxLength(100);

                entity.Property(e => e.ExporterPhone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Height).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ImportCurrencyCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ImportDuty)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ImportNote).HasMaxLength(1000);

                entity.Property(e => e.ImporterAddress).HasMaxLength(500);

                entity.Property(e => e.ImporterName).HasMaxLength(100);

                entity.Property(e => e.ImporterPersonInCharge).HasMaxLength(50);

                entity.Property(e => e.ImporterPhone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Length).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.WarehouseCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Weight).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Width).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.BinLocation)
                    .WithMany(p => p.Hawb)
                    .HasForeignKey(d => d.BinLocationId)
                    .HasConstraintName("FK_Hawb_BinLocation");

                entity.HasOne(d => d.Flight)
                    .WithMany(p => p.Hawb)
                    .HasForeignKey(d => d.FlightId)
                    .HasConstraintName("FK_Hawb_FlightId");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.Hawb)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Hawb_Warehouse");
            });

            modelBuilder.Entity<Ingredient>(entity =>
            {
                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.JanCode)
                    .IsRequired()
                    .HasMaxLength(400);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name).IsRequired();

                entity.Property(e => e.Origin)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Locations>(entity =>
            {
                entity.Property(e => e.Area).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.Contry).HasMaxLength(50);

                entity.Property(e => e.Emskey)
                    .HasColumnName("EMSKey")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.Vnpkey)
                    .HasColumnName("VNPKey")
                    .HasMaxLength(50);

                entity.Property(e => e.Vtkey)
                    .HasColumnName("VTKey")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Package>(entity =>
            {
                entity.Property(e => e.CodFee).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContainerCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContainerName).HasMaxLength(255);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DimensionWeight)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.EmployeeHandling)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FlightCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FlightName).HasMaxLength(255);

                entity.Property(e => e.HasComplain).HasDefaultValueSql("((0))");

                entity.Property(e => e.HawbCode).HasMaxLength(50);

                entity.Property(e => e.HawbName).HasMaxLength(50);

                entity.Property(e => e.Height)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LastBinLocation)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastSyncDate).HasColumnType("datetime");

                entity.Property(e => e.Length)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(400);

                entity.Property(e => e.NoOfPiece).HasDefaultValueSql("((0))");

                entity.Property(e => e.Note).HasMaxLength(1000);

                entity.Property(e => e.ProcessedDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessedEmployee)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Region)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SubTracking).HasMaxLength(512);

                entity.Property(e => e.TrackingCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TrackingNote)
                    .HasColumnName("TrackingNote ")
                    .HasMaxLength(1000);

                entity.Property(e => e.TransportCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseCode).HasMaxLength(255);

                entity.Property(e => e.Weight)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.WeightType).HasDefaultValueSql("((1))");

                entity.Property(e => e.Width)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.BinLocation)
                    .WithMany(p => p.Package)
                    .HasForeignKey(d => d.BinLocationId)
                    .HasConstraintName("FK_Package_BinLocation");

                entity.HasOne(d => d.Container)
                    .WithMany(p => p.Package)
                    .HasForeignKey(d => d.ContainerId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Package_Container");

                entity.HasOne(d => d.Hawb)
                    .WithMany(p => p.Package)
                    .HasForeignKey(d => d.HawbId)
                    .HasConstraintName("FK_Package_Hawb");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Package_Package");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.Package)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Package_Warehouse");
            });

            modelBuilder.Entity<PackageDetail>(entity =>
            {
                entity.Property(e => e.ApprovalDate).HasColumnType("datetime");

                entity.Property(e => e.BuyFee).HasDefaultValueSql("((0))");

                entity.Property(e => e.Crate).HasDefaultValueSql("((0))");

                entity.Property(e => e.CurrencyCode).HasMaxLength(8);

                entity.Property(e => e.CurrencyRate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CustomerAddress)
                    .HasMaxLength(255)
                    .HasComment("");

                entity.Property(e => e.CustomerDistrict)
                    .HasMaxLength(255)
                    .HasComment("");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(255)
                    .HasComment("");

                entity.Property(e => e.CustomerPhone)
                    .HasMaxLength(255)
                    .HasComment("");

                entity.Property(e => e.CustomerProvince).HasMaxLength(255);

                entity.Property(e => e.CustomerWard).HasMaxLength(255);

                entity.Property(e => e.DeliveryBillCode)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeHandling)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FromRoute)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Height)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.HeightQuote).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.IsEdited).HasDefaultValueSql("((0))");

                entity.Property(e => e.LastBinLocation)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Length)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LengthQuote).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Mawb).HasMaxLength(50);

                entity.Property(e => e.OrderCode)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.OrderStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OrderType).HasMaxLength(255);

                entity.Property(e => e.Paid)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PaymentStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProcessedDate).HasColumnType("datetime");

                entity.Property(e => e.Region)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ShippingFee)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ShippingFeeDomestic)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ShippingRouteCode).HasMaxLength(50);

                entity.Property(e => e.ShippingUnitGlobal)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Supporter)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Surcharge)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SurchargeNote).HasMaxLength(1024);

                entity.Property(e => e.SurchargePaymentBy)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(255);

                entity.Property(e => e.Total)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalAdditional)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalAmount)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.WarehouseCode).HasMaxLength(255);

                entity.Property(e => e.Weight)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.WeightQuote).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Width)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.WidthQuote).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.PackageDetailQuote)
                    .WithMany(p => p.PackageDetail)
                    .HasForeignKey(d => d.PackageDetailQuoteId)
                    .HasConstraintName("FK_PackageDetail_PackageDetailQuote");
            });

            modelBuilder.Entity<PackageDetailMapping>(entity =>
            {
                entity.HasKey(e => new { e.PackageId, e.PackageDetailId });

                entity.ToTable("Package_Detail_Mapping");

                entity.HasOne(d => d.PackageDetail)
                    .WithMany(p => p.PackageDetailMapping)
                    .HasForeignKey(d => d.PackageDetailId)
                    .HasConstraintName("FK_Package_Detail_Mapping_PackageDetail");

                entity.HasOne(d => d.Package)
                    .WithMany(p => p.PackageDetailMapping)
                    .HasForeignKey(d => d.PackageId)
                    .HasConstraintName("FK_Package_Detail_Mapping_Package");
            });

            modelBuilder.Entity<PackageDetailQuote>(entity =>
            {
                entity.Property(e => e.ApprovalDate).HasColumnType("datetime");

                entity.Property(e => e.AttachmentFile).HasMaxLength(500);

                entity.Property(e => e.Cod).HasColumnName("COD");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CustomerAddress)
                    .HasMaxLength(255)
                    .HasComment("");

                entity.Property(e => e.CustomerDistrict)
                    .HasMaxLength(255)
                    .HasComment("");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(255)
                    .HasComment("");

                entity.Property(e => e.CustomerPhone)
                    .HasMaxLength(255)
                    .HasComment("");

                entity.Property(e => e.CustomerProvince).HasMaxLength(255);

                entity.Property(e => e.CustomerWard).HasMaxLength(255);

                entity.Property(e => e.DeliveryBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.EmployeeHandling)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Paid)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PaymentStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.PoNumber).HasMaxLength(255);

                entity.Property(e => e.ShipmentActuallyMoneyCollect)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ShipmentCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ShipmentMoneyCollect).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Supporter)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Total).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TotalOrderWeight).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TotalShippingFee).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TotalWeight).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TransportedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransportedDate).HasColumnType("datetime");

                entity.Property(e => e.Unpaid)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.WarehouseCode)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<PcsShippingState>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StatusName).HasMaxLength(200);

                entity.Property(e => e.WebhookKey)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Weight).HasColumnType("decimal(4, 0)");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Height).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.HeightQuote).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Length).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.LengthQuote).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name).IsRequired();

                entity.Property(e => e.Price).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.PriceCustom).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.PriceQuantity).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.PriceStandard).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.PriceWeight).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.ProAttribute).HasColumnType("ntext");

                entity.Property(e => e.ProductUnit).HasMaxLength(50);

                entity.Property(e => e.QtyPerUnit).HasDefaultValueSql("((-1))");

                entity.Property(e => e.Tax).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Weight).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.WeightQuote).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Width).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.WidthQuote).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Product)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK_Product_Category");

                entity.HasOne(d => d.PackageDetail)
                    .WithMany(p => p.Product)
                    .HasForeignKey(d => d.PackageDetailId)
                    .HasConstraintName("FK_Product_PackageDetail");

                entity.HasOne(d => d.Package)
                    .WithMany(p => p.Product)
                    .HasForeignKey(d => d.PackageId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Product_Package");
            });

            modelBuilder.Entity<ProductSample>(entity =>
            {
                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FullDescriptionEn).HasColumnName("FullDescriptionEN");

                entity.Property(e => e.FullDescriptionJp).HasColumnName("FullDescriptionJP");

                entity.Property(e => e.Height).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Length).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ManufacturerPartNumber).HasMaxLength(400);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(400);

                entity.Property(e => e.NameEn)
                    .HasColumnName("NameEN")
                    .HasMaxLength(400);

                entity.Property(e => e.NameJp)
                    .HasColumnName("NameJP")
                    .HasMaxLength(400);

                entity.Property(e => e.Price).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.ProductUnit).HasMaxLength(50);

                entity.Property(e => e.QtyPerUnit).HasDefaultValueSql("((-1))");

                entity.Property(e => e.ShortDescriptionEn).HasColumnName("ShortDescriptionEN");

                entity.Property(e => e.ShortDescriptionJp).HasColumnName("ShortDescriptionJP");

                entity.Property(e => e.Tax).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Weight).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Width).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<ServiceCharge>(entity =>
            {
                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedWarehouseCode).HasMaxLength(255);

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.DescriptionEn)
                    .HasColumnName("DescriptionEN")
                    .HasMaxLength(1000);

                entity.Property(e => e.DescriptionJp)
                    .HasColumnName("DescriptionJP")
                    .HasMaxLength(1000);

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.NameEn)
                    .HasColumnName("NameEN")
                    .HasMaxLength(255);

                entity.Property(e => e.NameJp)
                    .HasColumnName("NameJP")
                    .HasMaxLength(255);

                entity.Property(e => e.Price).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.ToDate).HasColumnType("datetime");

                entity.Property(e => e.Unit).HasMaxLength(255);

                entity.Property(e => e.UnitEn)
                    .HasColumnName("UnitEN")
                    .HasMaxLength(255);

                entity.Property(e => e.UnitJp)
                    .HasColumnName("UnitJP")
                    .HasMaxLength(255);

                entity.Property(e => e.WarehouseCode).HasMaxLength(255);
            });

            modelBuilder.Entity<ServiceChargePackageMapping>(entity =>
            {
                entity.HasKey(e => new { e.PackageDetailId, e.ServiceChargeId })
                    .HasName("PK_ServiceCharge_Package_Mapping_1");

                entity.ToTable("ServiceCharge_Package_Mapping");

                entity.Property(e => e.EstimateTime).HasColumnType("datetime");

                entity.Property(e => e.Note).HasMaxLength(500);

                entity.Property(e => e.PaymentActuallyMoneyCollect).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PaymentBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Percent).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Price).HasColumnType("decimal(18, 10)");

                entity.HasOne(d => d.PackageDetail)
                    .WithMany(p => p.ServiceChargePackageMapping)
                    .HasForeignKey(d => d.PackageDetailId)
                    .HasConstraintName("FK_ServiceCharge_Package_Mapping_PackageDetail");

                entity.HasOne(d => d.ServiceCharge)
                    .WithMany(p => p.ServiceChargePackageMapping)
                    .HasForeignKey(d => d.ServiceChargeId)
                    .HasConstraintName("FK_ServiceCharge_Package_Mapping_ServiceCharge");
            });

            modelBuilder.Entity<Shipment>(entity =>
            {
                entity.HasKey(e => e.PackageDetailQuoteId)
                    .HasName("PK_Shipment_1");

                entity.Property(e => e.PackageDetailQuoteId).ValueGeneratedNever();

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CustomerAddress)
                    .HasMaxLength(255)
                    .HasComment("Địa chỉ nhận hàng");

                entity.Property(e => e.CustomerDistrict)
                    .HasMaxLength(255)
                    .HasComment("Người đặt hàng");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(255)
                    .HasComment("Tên người nhận hàng");

                entity.Property(e => e.CustomerPhone)
                    .HasMaxLength(255)
                    .HasComment("Số phone nhận hàng");

                entity.Property(e => e.CustomerProvince).HasMaxLength(255);

                entity.Property(e => e.CustomerWard).HasMaxLength(255);

                entity.Property(e => e.DeliveryCharge)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("Tiền COD khách phải thanh toán");

                entity.Property(e => e.DeliveryEstimateTime).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(400);

                entity.Property(e => e.PoNumber).HasMaxLength(255);

                entity.Property(e => e.ShippingUnitType).HasComment("Đơn vị vận chuyển");

                entity.Property(e => e.TotalAmount)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("Tổng tiền đơn hàng khách phải thanh toán");

                entity.Property(e => e.Type).HasComment("Loại vận chuyển");

                entity.Property(e => e.WarehouseCode)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.PackageDetailQuote)
                    .WithOne(p => p.Shipment)
                    .HasForeignKey<Shipment>(d => d.PackageDetailQuoteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Shipment_PackageDetailQuote");
            });

            modelBuilder.Entity<ShipmentStatusHistory>(entity =>
            {
                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Note).HasMaxLength(500);

                entity.HasOne(d => d.Shipment)
                    .WithMany(p => p.ShipmentStatusHistory)
                    .HasForeignKey(d => d.ShipmentId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ShipmentStatusHistory_Shipment");
            });

            modelBuilder.Entity<ShippingRoute>(entity =>
            {
                entity.HasIndex(e => e.Code);

                entity.HasIndex(e => e.DisplayOrder);

                entity.HasIndex(e => e.FromCountryId);

                entity.HasIndex(e => e.ToCountryId);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ShippingRouteWarehouse>(entity =>
            {
                entity.ToTable("ShippingRoute_Warehouse");

                entity.HasIndex(e => e.DisplayOrder);

                entity.HasIndex(e => e.ShippingRouteId);

                entity.HasIndex(e => e.WarehouseId);

                entity.Property(e => e.ShippingRouteCode)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.WarehouseCode)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.ShippingRoute)
                    .WithMany(p => p.ShippingRouteWarehouse)
                    .HasForeignKey(d => d.ShippingRouteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShippingRoute_Warehouses_PK_ShippingRoute");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ShippingRouteWarehouse)
                    .HasForeignKey(d => d.WarehouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShippingRoute_Warehouses_PK_Warehouse");
            });

            modelBuilder.Entity<VtpShippingState>(entity =>
            {
                entity.Property(e => e.CreatedDateUtc).HasColumnType("datetime");

                entity.Property(e => e.CreatedUid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LocationCurrently)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.MoneyCollection).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MoneyFeeCod).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MoneyTotal).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Note).HasMaxLength(500);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OrderReference)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OrderStatusDate).HasColumnType("datetime");

                entity.Property(e => e.StatusName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.UpdatedDateUtc).HasColumnType("datetime");

                entity.Property(e => e.UpdatedUid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.PackageDetailQuote)
                    .WithMany(p => p.VtpShippingState)
                    .HasForeignKey(d => d.PackageDetailQuoteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VtpShippingState_Shipment");
            });

            modelBuilder.Entity<Warehouse>(entity =>
            {
                entity.Property(e => e.Address).HasMaxLength(1000);

                entity.Property(e => e.City).HasMaxLength(255);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Country).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Currency).HasMaxLength(255);

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.Email)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Holidays)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LastCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Latitude).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.Longitude).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PostalCode).HasMaxLength(255);

                entity.Property(e => e.Region)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ShipName).HasMaxLength(255);

                entity.Property(e => e.State).HasMaxLength(255);

                entity.Property(e => e.Status)
                    .HasDefaultValueSql("((1))")
                    .HasComment("");

                entity.Property(e => e.Terms).HasMaxLength(4000);

                entity.Property(e => e.Type).HasComment("");

                entity.Property(e => e.WorkingTimes)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Yacode)
                    .HasColumnName("YACode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<WarehouseEmp>(entity =>
            {
                entity.HasKey(e => new { e.AccountId, e.WarehouseId })
                    .HasName("PK_WAREHOUSE_EMP");

                entity.ToTable("Warehouse_EMP");

                entity.Property(e => e.AccountId).HasMaxLength(50);

                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.EffectiveTime).HasColumnType("datetime");

                entity.Property(e => e.Productivity).HasDefaultValueSql("((0))");

                entity.Property(e => e.TakeCare).IsUnicode(false);

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.WarehouseEmp)
                    .HasForeignKey(d => d.WarehouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Warehouse_EMP_Warehouse");
            });

            modelBuilder.Entity<WarningInfo>(entity =>
            {
                entity.HasKey(e => e.CategoryId);

                entity.Property(e => e.CategoryId).ValueGeneratedNever();

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ToDate).HasColumnType("datetime");

                entity.HasOne(d => d.Category)
                    .WithOne(p => p.WarningInfo)
                    .HasForeignKey<WarningInfo>(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WarningInfo_Category");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}