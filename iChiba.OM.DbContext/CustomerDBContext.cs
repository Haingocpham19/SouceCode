// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using iChiba.OM.Model;

namespace iChiba.OM.DbContext
{
    public partial class CustomerDBContext : Microsoft.EntityFrameworkCore.DbContext
    {
        public CustomerDBContext()
        {
        }

        public CustomerDBContext(DbContextOptions<CustomerDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Accaccount> Accaccount { get; set; }
        public virtual DbSet<BankPayment> BankPayment { get; set; }
        public virtual DbSet<BankTransactionHistory> BankTransactionHistory { get; set; }
        public virtual DbSet<Bankic> Bankic { get; set; }
        public virtual DbSet<Bankinfo> Bankinfo { get; set; }
        public virtual DbSet<BidConfig> BidConfig { get; set; }
        public virtual DbSet<BidExternalConfig> BidExternalConfig { get; set; }
        public virtual DbSet<BuyerConfig> BuyerConfig { get; set; }
        public virtual DbSet<CodImport> CodImport { get; set; }
        public virtual DbSet<Customer> Customer { get; set; }
        public virtual DbSet<CustomerAddress> CustomerAddress { get; set; }
        public virtual DbSet<CustomerBankinfo> CustomerBankinfo { get; set; }
        public virtual DbSet<CustomerCode> CustomerCode { get; set; }
        public virtual DbSet<CustomerGroup> CustomerGroup { get; set; }
        public virtual DbSet<CustomerNotifyConfig> CustomerNotifyConfig { get; set; }
        public virtual DbSet<CustomerNotifyConfig1> CustomerNotifyConfig1 { get; set; }
        public virtual DbSet<CustomerProfile> CustomerProfile { get; set; }
        public virtual DbSet<CustomerPromotion> CustomerPromotion { get; set; }
        public virtual DbSet<CustomerWallet> CustomerWallet { get; set; }
        public virtual DbSet<CustomerWarehouse> CustomerWarehouse { get; set; }
        public virtual DbSet<Ddimport> Ddimport { get; set; }
        public virtual DbSet<DepositMessage> DepositMessage { get; set; }
        public virtual DbSet<Deposits> Deposits { get; set; }
        public virtual DbSet<DepositsEmailNotify> DepositsEmailNotify { get; set; }
        public virtual DbSet<EmailMkView> EmailMkView { get; set; }
        public virtual DbSet<EmailTemplate> EmailTemplate { get; set; }
        public virtual DbSet<Employee> Employee { get; set; }
        public virtual DbSet<EmployeeProfile> EmployeeProfile { get; set; }
        public virtual DbSet<Exchangerates> Exchangerates { get; set; }
        public virtual DbSet<Fbcomment> Fbcomment { get; set; }
        public virtual DbSet<Fbhistory> Fbhistory { get; set; }
        public virtual DbSet<Fbpackage> Fbpackage { get; set; }
        public virtual DbSet<Fbpackagedetail> Fbpackagedetail { get; set; }
        public virtual DbSet<Fbproduct> Fbproduct { get; set; }
        public virtual DbSet<Feedback> Feedback { get; set; }
        public virtual DbSet<Freeze> Freeze { get; set; }
        public virtual DbSet<FreezeAcc> FreezeAcc { get; set; }
        public virtual DbSet<Level> Level { get; set; }
        public virtual DbSet<LevelTranport> LevelTranport { get; set; }
        public virtual DbSet<LevelTranportGroup> LevelTranportGroup { get; set; }
        public virtual DbSet<Metemp> Metemp { get; set; }
        public virtual DbSet<MoneyTransactionHistory> MoneyTransactionHistory { get; set; }
        public virtual DbSet<NotifyConfig> NotifyConfig { get; set; }
        public virtual DbSet<NotifyConfig1> NotifyConfig1 { get; set; }
        public virtual DbSet<NotifyConfigGroup> NotifyConfigGroup { get; set; }
        public virtual DbSet<Order> Order { get; set; }
        public virtual DbSet<OrderCom> OrderCom { get; set; }
        public virtual DbSet<OrderComGroup> OrderComGroup { get; set; }
        public virtual DbSet<OrderComMoney> OrderComMoney { get; set; }
        public virtual DbSet<OrderDeliverybill> OrderDeliverybill { get; set; }
        public virtual DbSet<OrderEmailNotify> OrderEmailNotify { get; set; }
        public virtual DbSet<OrderImportTemp> OrderImportTemp { get; set; }
        public virtual DbSet<OrderImportTempex> OrderImportTempex { get; set; }
        public virtual DbSet<OrderMessage> OrderMessage { get; set; }
        public virtual DbSet<OrderPackage> OrderPackage { get; set; }
        public virtual DbSet<OrderPackageProduct> OrderPackageProduct { get; set; }
        public virtual DbSet<OrderPayimage> OrderPayimage { get; set; }
        public virtual DbSet<OrderProofPayment> OrderProofPayment { get; set; }
        public virtual DbSet<OrderPurchase> OrderPurchase { get; set; }
        public virtual DbSet<OrderPurchaseLog> OrderPurchaseLog { get; set; }
        public virtual DbSet<OrderRevenue> OrderRevenue { get; set; }
        public virtual DbSet<OrderService> OrderService { get; set; }
        public virtual DbSet<OrderServiceMapping> OrderServiceMapping { get; set; }
        public virtual DbSet<OrderTracking> OrderTracking { get; set; }
        public virtual DbSet<Orderdetail> Orderdetail { get; set; }
        public virtual DbSet<PackageTracking> PackageTracking { get; set; }
        public virtual DbSet<Payforbuyer> Payforbuyer { get; set; }
        public virtual DbSet<Payment> Payment { get; set; }
        public virtual DbSet<PaymentAccount> PaymentAccount { get; set; }
        public virtual DbSet<PaymentMessage> PaymentMessage { get; set; }
        public virtual DbSet<ProductOrigin> ProductOrigin { get; set; }
        public virtual DbSet<ProductType> ProductType { get; set; }
        public virtual DbSet<ProductTypeGroup> ProductTypeGroup { get; set; }
        public virtual DbSet<ProofPayment> ProofPayment { get; set; }
        public virtual DbSet<PurchaseReport> PurchaseReport { get; set; }
        public virtual DbSet<PurchaseReportData> PurchaseReportData { get; set; }
        public virtual DbSet<QueueCustomercare> QueueCustomercare { get; set; }
        public virtual DbSet<ShippingJpcompany> ShippingJpcompany { get; set; }
        public virtual DbSet<Successfulbid> Successfulbid { get; set; }
        public virtual DbSet<Supplier> Supplier { get; set; }
        public virtual DbSet<SurveyProductTypeGroup> SurveyProductTypeGroup { get; set; }
        public virtual DbSet<SurveyShippingRoute> SurveyShippingRoute { get; set; }
        public virtual DbSet<SyncBankTransactionHistory> SyncBankTransactionHistory { get; set; }
        public virtual DbSet<TrainProtype> TrainProtype { get; set; }
        public virtual DbSet<ViewRandonNumber> ViewRandonNumber { get; set; }
        public virtual DbSet<Wallet> Wallet { get; set; }
        public virtual DbSet<WalletTrans> WalletTrans { get; set; }
        public virtual DbSet<Withdrawal> Withdrawal { get; set; }
        public virtual DbSet<WithdrawalMessage> WithdrawalMessage { get; set; }
        public virtual DbSet<WorkItem> WorkItem { get; set; }
        public virtual DbSet<Workflow> Workflow { get; set; }
        public virtual DbSet<WorkflowHistory> WorkflowHistory { get; set; }
        public virtual DbSet<WorkflowVariable> WorkflowVariable { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Accaccount>(entity =>
            {
                entity.ToTable("ACCACCOUNT");

                entity.Property(e => e.BankNumber).HasMaxLength(255);

                entity.Property(e => e.BeginBalanceDate).HasColumnType("datetime");

                entity.Property(e => e.BeginBalanceNote).HasMaxLength(255);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Route)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SyncAccDate).HasColumnType("datetime");

                entity.HasOne(d => d.ParentNavigation)
                    .WithMany(p => p.InverseParentNavigation)
                    .HasForeignKey(d => d.Parent)
                    .HasConstraintName("FK_ACCACCOUNT_ACCACCOUNT");
            });

            modelBuilder.Entity<BankPayment>(entity =>
            {
                entity.ToTable("BANK_PAYMENT");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Ftcode)
                    .HasColumnName("FTCode")
                    .HasMaxLength(50);

                entity.Property(e => e.Note).HasMaxLength(500);

                entity.Property(e => e.ObjectCode).HasMaxLength(50);

                entity.Property(e => e.ObjectType).HasMaxLength(50);

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasMaxLength(50);

                entity.Property(e => e.ProcessDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionType)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<BankTransactionHistory>(entity =>
            {
                entity.ToTable("BANK_TRANSACTION_HISTORY");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AccCredited).HasMaxLength(50);

                entity.Property(e => e.AccDebit).HasMaxLength(50);

                entity.Property(e => e.AccountNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BankType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreditOwner).HasMaxLength(255);

                entity.Property(e => e.DebitBank).HasMaxLength(255);

                entity.Property(e => e.DebitOwner).HasMaxLength(255);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Hash)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.HashUid)
                    .HasColumnName("HashUId")
                    .HasMaxLength(255);

                entity.Property(e => e.MappingBy).HasMaxLength(50);

                entity.Property(e => e.MappingDate).HasColumnType("datetime");

                entity.Property(e => e.Note).HasMaxLength(500);

                entity.Property(e => e.ObjectCode).HasMaxLength(50);

                entity.Property(e => e.ObjectCodeCredited).HasMaxLength(50);

                entity.Property(e => e.ObjectCodeDebit).HasMaxLength(50);

                entity.Property(e => e.ObjectId).HasMaxLength(50);

                entity.Property(e => e.ObjectType).HasMaxLength(50);

                entity.Property(e => e.ObjectTypeCredited).HasMaxLength(50);

                entity.Property(e => e.ObjectTypeDebit).HasMaxLength(50);

                entity.Property(e => e.Ppstatus).HasColumnName("PPStatus");

                entity.Property(e => e.SyncAccDate).HasColumnType("datetime");

                entity.Property(e => e.SyncAccId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SyncAccNo).HasMaxLength(255);

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionDateExtract)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.TransactionDateValid).HasColumnType("datetime");
            });

            modelBuilder.Entity<Bankic>(entity =>
            {
                entity.ToTable("BANKIC");

                entity.Property(e => e.AccAccount).HasMaxLength(255);

                entity.Property(e => e.AccountName).HasMaxLength(255);

                entity.Property(e => e.AccountNumber).HasMaxLength(255);

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.BankFullName).HasMaxLength(255);

                entity.Property(e => e.BankName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.BankType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BeginBalanceDate).HasColumnType("datetime");

                entity.Property(e => e.Branch).HasMaxLength(255);

                entity.Property(e => e.Icon).HasMaxLength(255);

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Picture).HasMaxLength(255);

                entity.Property(e => e.Province).HasMaxLength(255);

                entity.Property(e => e.ProxyHost)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ProxyPassword)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProxyUserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceGroup)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Bankinfo>(entity =>
            {
                entity.ToTable("BANKINFO");

                entity.Property(e => e.AccountName).HasMaxLength(255);

                entity.Property(e => e.AccountNumber).HasMaxLength(255);

                entity.Property(e => e.BankFullName).HasMaxLength(255);

                entity.Property(e => e.BankName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.BankType).HasMaxLength(50);

                entity.Property(e => e.Branch).HasMaxLength(255);

                entity.Property(e => e.Icon).HasMaxLength(255);

                entity.Property(e => e.Picture).HasMaxLength(255);

                entity.Property(e => e.Province).HasMaxLength(255);
            });

            modelBuilder.Entity<BidConfig>(entity =>
            {
                entity.ToTable("BID_CONFIG");

                entity.HasIndex(e => e.Username)
                    .HasName("UQ__BID_CONF__536C85E497C5E6EA")
                    .IsUnique();

                entity.Property(e => e.Alias).HasMaxLength(255);

                entity.Property(e => e.Buyer).HasMaxLength(255);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.GroupKey).HasMaxLength(255);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Note).HasMaxLength(500);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ProxyHost).HasMaxLength(255);

                entity.Property(e => e.ProxyPassword)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProxyUserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<BidExternalConfig>(entity =>
            {
                entity.ToTable("BID_EXTERNAL_CONFIG");

                entity.HasIndex(e => e.YauserName)
                    .HasName("UQ__BID_EXTE__34B280C4102A99D4")
                    .IsUnique();

                entity.Property(e => e.AccountId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasComment("0. Chưa active 1. Active");

                entity.Property(e => e.YauserName)
                    .IsRequired()
                    .HasColumnName("YAUserName")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BuyerConfig>(entity =>
            {
                entity.ToTable("BUYER_CONFIG");

                entity.Property(e => e.Buyer).HasMaxLength(1000);

                entity.Property(e => e.Domain).HasMaxLength(250);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.OrderType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Routes).HasMaxLength(50);
            });

            modelBuilder.Entity<CodImport>(entity =>
            {
                entity.ToTable("COD_IMPORT");

                entity.Property(e => e.Cod)
                    .HasColumnName("COD")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.CodeType).HasMaxLength(50);

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.Done).HasDefaultValueSql("((0))");

                entity.Property(e => e.DoneDate).HasColumnType("datetime");

                entity.Property(e => e.DoneOrderCode).HasMaxLength(50);

                entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ImportDate).HasColumnType("datetime");

                entity.Property(e => e.Mawb).HasMaxLength(50);

                entity.Property(e => e.OrderCode).HasMaxLength(50);

                entity.Property(e => e.PayCodeDate).HasColumnType("datetime");

                entity.Property(e => e.Supplier).HasMaxLength(50);

                entity.Property(e => e.Tracking)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Warehouse).HasMaxLength(50);
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.ToTable("CUSTOMER");

                entity.HasIndex(e => e.AccountId)
                    .HasName("UQ__CUSTOMER__349DA5A726906930")
                    .IsUnique();

                entity.Property(e => e.AccountId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Area).HasMaxLength(250);

                entity.Property(e => e.Avatar).HasMaxLength(255);

                entity.Property(e => e.BidActive).HasColumnName("_BidActive");

                entity.Property(e => e.Birthday).HasColumnType("date");

                entity.Property(e => e.BypassSignEcontract)
                    .HasColumnName("BypassSignEContract")
                    .HasComment("Bỏ qua, không cần ký hợp đồng điện tử");

                entity.Property(e => e.CareBy).HasMaxLength(250);

                entity.Property(e => e.Code)
                    .HasMaxLength(250)
                    .HasComment("Mã khách hàng");

                entity.Property(e => e.CodeCreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Country).HasMaxLength(250);

                entity.Property(e => e.CreatedBy).HasMaxLength(250);

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.District).HasMaxLength(250);

                entity.Property(e => e.Domain).HasMaxLength(255);

                entity.Property(e => e.Email).HasMaxLength(255);

                entity.Property(e => e.Fullname).HasMaxLength(255);

                entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.IdAddress).HasMaxLength(255);

                entity.Property(e => e.IdBirthDay).HasColumnType("datetime");

                entity.Property(e => e.IdImageBack)
                    .HasMaxLength(1000)
                    .HasComment("GTTT mặt sau");

                entity.Property(e => e.IdImageFront)
                    .HasMaxLength(1000)
                    .HasComment("GTTT mặt trước");

                entity.Property(e => e.IdImages).HasMaxLength(255);

                entity.Property(e => e.IdIssuedBy).HasMaxLength(255);

                entity.Property(e => e.IdIssuedDate).HasColumnType("datetime");

                entity.Property(e => e.IdName).HasMaxLength(255);

                entity.Property(e => e.IdNumber).HasMaxLength(50);

                entity.Property(e => e.IdPermanentAddress).HasMaxLength(255);

                entity.Property(e => e.ModifiedBy).HasMaxLength(250);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Phone).HasMaxLength(255);

                entity.Property(e => e.Province).HasMaxLength(250);

                entity.Property(e => e.SyncAccCode).HasMaxLength(250);

                entity.Property(e => e.SyncAccDate).HasColumnType("datetime");

                entity.Property(e => e.TranActive).HasColumnName("_TranActive");

                entity.Property(e => e.TranCode).HasMaxLength(255);

                entity.Property(e => e.Username).HasMaxLength(250);

                entity.Property(e => e.Website).HasMaxLength(255);
            });

            modelBuilder.Entity<CustomerAddress>(entity =>
            {
                entity.ToTable("CUSTOMER_ADDRESS");

                entity.Property(e => e.Address).HasMaxLength(255);

                entity.Property(e => e.Country).HasMaxLength(255);

                entity.Property(e => e.District).HasMaxLength(255);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Note).HasMaxLength(255);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.PostalCode).HasMaxLength(255);

                entity.Property(e => e.Province).HasMaxLength(255);

                entity.Property(e => e.Ward).HasMaxLength(255);

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.CustomerAddress)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK__CUSTOMER___Custo__69FBBC1F");
            });

            modelBuilder.Entity<CustomerBankinfo>(entity =>
            {
                entity.ToTable("CUSTOMER_BANKINFO");

                entity.Property(e => e.AccountId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BankAccountName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.BankBranch).HasMaxLength(255);

                entity.Property(e => e.BankName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.BankNumber)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.BankProvince).HasMaxLength(255);

                entity.Property(e => e.BankType).HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Hash).HasMaxLength(500);
            });

            modelBuilder.Entity<CustomerCode>(entity =>
            {
                entity.ToTable("CUSTOMER_CODE");

                entity.HasIndex(e => e.Code)
                    .HasName("UQ__CUSTOMER__A25C5AA72E8DA7CC")
                    .IsUnique();

                entity.Property(e => e.AccountId).HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CustomerGroup>(entity =>
            {
                entity.ToTable("CUSTOMER_GROUP");

                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Domain).HasMaxLength(50);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<CustomerNotifyConfig>(entity =>
            {
                entity.ToTable("CUSTOMER_NOTIFY_CONFIG");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.AccountId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AppId)
                    .IsRequired()
                    .HasMaxLength(450);

                entity.Property(e => e.NotifyConfigCode)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<CustomerNotifyConfig1>(entity =>
            {
                entity.ToTable("CustomerNotifyConfig");

                entity.HasIndex(e => e.AppId);

                entity.HasIndex(e => e.CustomerId);

                entity.HasIndex(e => e.UserId);

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AppId)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasComment("Mã App (VD: ichiba-portal-web)");

                entity.Property(e => e.CustomerId).HasComment("CustomerId");

                entity.Property(e => e.NotifyConfigCode)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.NotifyConfigId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasComment("UserId SSO");
            });

            modelBuilder.Entity<CustomerProfile>(entity =>
            {
                entity.HasKey(e => new { e.Key, e.AccountId })
                    .HasName("PK_CUSTOMER_PROFILE_1");

                entity.ToTable("CUSTOMER_PROFILE");

                entity.Property(e => e.Key).HasMaxLength(50);

                entity.Property(e => e.AccountId).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<CustomerPromotion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CUSTOMER_PROMOTION");

                entity.Property(e => e.AccountId).HasMaxLength(255);

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.CustomerName).HasMaxLength(255);
            });

            modelBuilder.Entity<CustomerWallet>(entity =>
            {
                entity.HasKey(e => new { e.AccountId, e.WalletId })
                    .HasName("PK_WALLET");

                entity.ToTable("CUSTOMER_WALLET");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WalletId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BeginBalanceDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Hash)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Ictdelivered).HasColumnName("ICTDelivered");

                entity.Property(e => e.Ictpaid).HasColumnName("ICTPaid");

                entity.Property(e => e.Ictreceived).HasColumnName("ICTReceived");

                entity.Property(e => e.IctwaitDelivery).HasColumnName("ICTWaitDelivery");

                entity.Property(e => e.IctwaitPayment).HasColumnName("ICTWaitPayment");

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.PaidIchibaReceived).HasDefaultValueSql("((0))");

                entity.Property(e => e.PaidIctdelivered).HasColumnName("PaidICTDelivered");

                entity.Property(e => e.PaidIctwaitDelivery).HasColumnName("PaidICTWaitDelivery");

                entity.Property(e => e.PaidIctwaitPayment).HasColumnName("PaidICTWaitPayment");

                entity.Property(e => e.PaidOrderIct).HasColumnName("PaidOrderICT");

                entity.Property(e => e.PaidPurchased).HasDefaultValueSql("((0))");

                entity.Property(e => e.PaidWaitDelivery).HasDefaultValueSql("((0))");

                entity.Property(e => e.PaidWaitDeposit).HasDefaultValueSql("((0))");

                entity.Property(e => e.PaidWaitPayment).HasDefaultValueSql("((0))");

                entity.Property(e => e.PaidWaitPurchase).HasDefaultValueSql("((0))");

                entity.Property(e => e.PaymentProcessDate).HasColumnType("datetime");

                entity.Property(e => e.PaymentSummary).HasDefaultValueSql("((0))");

                entity.Property(e => e.PaymentSummaryDate).HasColumnType("datetime");

                entity.Property(e => e.PaymentSummaryRequest).HasColumnType("datetime");

                entity.Property(e => e.TotalIchibaReceived).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalIctdelivered).HasColumnName("TotalICTDelivered");

                entity.Property(e => e.TotalIctpaid).HasColumnName("TotalICTPaid");

                entity.Property(e => e.TotalIctwaitDelivery).HasColumnName("TotalICTWaitDelivery");

                entity.Property(e => e.TotalIctwaitPayment).HasColumnName("TotalICTWaitPayment");

                entity.Property(e => e.TotalOrderIct).HasColumnName("TotalOrderICT");

                entity.Property(e => e.TotalPurchased).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalWaitDelivery).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalWaitDeposit).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalWaitPayment).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalWaitPurchase).HasDefaultValueSql("((0))");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Wallet)
                    .WithMany(p => p.CustomerWallet)
                    .HasForeignKey(d => d.WalletId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CUSTOMER_WALLET_WALLET");
            });

            modelBuilder.Entity<CustomerWarehouse>(entity =>
            {
                entity.HasKey(e => new { e.CustomerId, e.WarehouseId });

                entity.ToTable("CUSTOMER_WAREHOUSE");

                entity.Property(e => e.ActivationDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Ddimport>(entity =>
            {
                entity.ToTable("DDIMPORT");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Currency).HasMaxLength(255);

                entity.Property(e => e.Ddtype)
                    .HasColumnName("DDType")
                    .HasMaxLength(255);

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.HelpLink).HasMaxLength(500);

                entity.Property(e => e.Ord).HasDefaultValueSql("((0))");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<DepositMessage>(entity =>
            {
                entity.ToTable("DEPOSIT_MESSAGE");

                entity.Property(e => e.Action).HasMaxLength(255);

                entity.Property(e => e.Author).IsRequired();

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Deposit)
                    .WithMany(p => p.DepositMessage)
                    .HasForeignKey(d => d.DepositId)
                    .HasConstraintName("FK_DEPOSIT_MESSAGE_DEPOSITS");
            });

            modelBuilder.Entity<Deposits>(entity =>
            {
                entity.ToTable("DEPOSITS");

                entity.Property(e => e.AccountId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Amount).HasComment("Số tiền");

                entity.Property(e => e.BankContent).HasMaxLength(500);

                entity.Property(e => e.BankDate).HasColumnType("datetime");

                entity.Property(e => e.BankDescription).HasMaxLength(500);

                entity.Property(e => e.BankName).HasMaxLength(500);

                entity.Property(e => e.BankNumber)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmBy).HasMaxLength(50);

                entity.Property(e => e.ConfirmDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CustomerBankName).HasMaxLength(500);

                entity.Property(e => e.CustomerBankNumber)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerBankOwner).HasMaxLength(500);

                entity.Property(e => e.CustomerTranCode).HasMaxLength(255);

                entity.Property(e => e.CustomerTranDate).HasColumnType("datetime");

                entity.Property(e => e.DepositStatus).HasComment("Đang xử lý, đã xử lý, huỷ");

                entity.Property(e => e.DepositType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("BANK | ICHIBA");

                entity.Property(e => e.Ftcode)
                    .HasColumnName("FTCode")
                    .HasMaxLength(50);

                entity.Property(e => e.Hash).IsRequired();

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Note).HasMaxLength(500);

                entity.Property(e => e.PayImage).HasMaxLength(255);

                entity.Property(e => e.ProcessDate).HasColumnType("datetime");

                entity.Property(e => e.Ref).HasMaxLength(255);

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'KHOI_TAO')");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'DEPOSIT_WORKFLOW')");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.WalletId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Wallet)
                    .WithMany(p => p.Deposits)
                    .HasForeignKey(d => d.WalletId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DEPOSITS_WALLET");
            });

            modelBuilder.Entity<DepositsEmailNotify>(entity =>
            {
                entity.ToTable("DEPOSITS_EMAIL_NOTIFY");

                entity.Property(e => e.AccountId).HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Receiver)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ReceiverName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.SendDate).HasColumnType("datetime");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.WalletId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EmailMkView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EMAIL_MK_VIEW");

                entity.Property(e => e.Email).HasMaxLength(255);

                entity.Property(e => e.Fullname).HasMaxLength(255);
            });

            modelBuilder.Entity<EmailTemplate>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Guid.NewGuid().ToString()");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasComment("Kích hoạt");

                entity.Property(e => e.AppId)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasComment("Mã App (VD: ichiba-portal-web)");

                entity.Property(e => e.AppNotifyConfigCode)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasComment("Mã thông báo của App (VD: NotifyConfigCodes.Orders.Transport.OrderPlaced)");

                entity.Property(e => e.BccEmailAddresses)
                    .HasMaxLength(1000)
                    .HasComment("Bcc");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasComment("Id SSO người tạo");

                entity.Property(e => e.CreatedByUserName)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasComment("UserName SSO người tạo");

                entity.Property(e => e.CreatedOnUtc)
                    .HasColumnType("datetime")
                    .HasComment("Ngày giờ tạo");

                entity.Property(e => e.DelayBeforeSend).HasComment("Delay thời gian gửi");

                entity.Property(e => e.Description)
                    .HasMaxLength(4000)
                    .HasComment("Mô tả");

                entity.Property(e => e.DisplayOrder)
                    .HasDefaultValueSql("((9999))")
                    .HasComment("Thứ tự hiển thị");

                entity.Property(e => e.GroupType).HasComment("Nhóm cấu hình (Enum: NotifyConfigGroup)");

                entity.Property(e => e.HasAttachments).HasComment("Có tệp đính kèm");

                entity.Property(e => e.HtmlBody).HasComment("Nội dung Html");

                entity.Property(e => e.LanguageCulture)
                    .HasMaxLength(50)
                    .HasComment("Mã ngôn ngữ (VD: vi-VN, en-US)");

                entity.Property(e => e.MessageDelayPeriod).HasComment("Đơn vị thời gian delay (Enum: MessageDelayPeriod - 0: giờ; 1: ngày)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasComment("Tên Template");

                entity.Property(e => e.Priority).HasComment("Độ ưu tiên (Enum: NotifyPriority)");

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasComment("Tiêu đề");

                entity.Property(e => e.TextBody).HasComment("Nội dung Text");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(450)
                    .HasComment("Id SSO người sửa");

                entity.Property(e => e.UpdatedByUserName)
                    .HasMaxLength(256)
                    .HasComment("UserName SSO người sửa");

                entity.Property(e => e.UpdatedOnUtc)
                    .HasColumnType("datetime")
                    .HasComment("Ngày giờ sửa");
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.ToTable("EMPLOYEE");

                entity.Property(e => e.AccountId).HasMaxLength(255);

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(255);

                entity.Property(e => e.FullName).HasMaxLength(255);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.SyncAccDate).HasColumnType("datetime");

                entity.Property(e => e.Username).HasMaxLength(255);
            });

            modelBuilder.Entity<EmployeeProfile>(entity =>
            {
                entity.HasKey(e => new { e.AccountId, e.Key });

                entity.ToTable("EMPLOYEE_PROFILE");

                entity.Property(e => e.AccountId).HasMaxLength(50);

                entity.Property(e => e.Key).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Exchangerates>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("EXCHANGERATES");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<Fbcomment>(entity =>
            {
                entity.ToTable("FBCOMMENT");

                entity.Property(e => e.Body).HasMaxLength(1000);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.HasOne(d => d.Fb)
                    .WithMany(p => p.Fbcomment)
                    .HasForeignKey(d => d.FbId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FBCOMMENT_FEEDBACK");
            });

            modelBuilder.Entity<Fbhistory>(entity =>
            {
                entity.ToTable("FBHISTORY");

                entity.Property(e => e.CreatedBy).HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Note).HasMaxLength(1000);

                entity.Property(e => e.OrderCode).HasMaxLength(50);

                entity.Property(e => e.Owner).HasMaxLength(50);

                entity.Property(e => e.Tracking).HasMaxLength(255);

                entity.HasOne(d => d.Fb)
                    .WithMany(p => p.Fbhistory)
                    .HasForeignKey(d => d.FbId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FBHISTORY_FEEDBACK");
            });

            modelBuilder.Entity<Fbpackage>(entity =>
            {
                entity.ToTable("FBPACKAGE");

                entity.Property(e => e.CodFee).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DimensionWeight)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.EmployeeHandling)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Height)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LastSyncDate).HasColumnType("datetime");

                entity.Property(e => e.Length)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(400);

                entity.Property(e => e.NoOfPiece).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProcessedDate).HasColumnType("datetime");

                entity.Property(e => e.Region)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TrackingCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransportCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseCode).HasMaxLength(255);

                entity.Property(e => e.Weight)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Width)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_FBPACKAGE_FBPACKAGE");
            });

            modelBuilder.Entity<Fbpackagedetail>(entity =>
            {
                entity.ToTable("FBPACKAGEDETAIL");

                entity.Property(e => e.BuyFee).HasDefaultValueSql("((0))");

                entity.Property(e => e.CurrencyCode).HasMaxLength(8);

                entity.Property(e => e.CurrencyRate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CustomerAddress)
                    .HasMaxLength(255)
                    .HasComment("Địa chỉ nhận hàng");

                entity.Property(e => e.CustomerDistrict)
                    .HasMaxLength(255)
                    .HasComment("Người đặt hàng");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(255)
                    .HasComment("Tên người nhận hàng");

                entity.Property(e => e.CustomerPhone)
                    .HasMaxLength(255)
                    .HasComment("Số phone nhận hàng");

                entity.Property(e => e.CustomerProvince).HasMaxLength(255);

                entity.Property(e => e.CustomerWard).HasMaxLength(255);

                entity.Property(e => e.DeliveryBillCode)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeHandling)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Height)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Length)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderCode)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.OrderStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OrderType).HasMaxLength(255);

                entity.Property(e => e.Paid)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ProcessedDate).HasColumnType("datetime");

                entity.Property(e => e.Region)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ShippingFee)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ShippingRouteCode).HasMaxLength(255);

                entity.Property(e => e.ShippingUnitGlobal)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Surcharge)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SurchargeNote).HasMaxLength(1024);

                entity.Property(e => e.Title).HasMaxLength(255);

                entity.Property(e => e.Total)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalAdditional)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalAmount)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.WarehouseCode).HasMaxLength(255);

                entity.Property(e => e.Weight)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Width)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Package)
                    .WithMany(p => p.Fbpackagedetail)
                    .HasForeignKey(d => d.PackageId)
                    .HasConstraintName("FK_FBPACKAGEDETAIL_FBPACKAGE");
            });

            modelBuilder.Entity<Fbproduct>(entity =>
            {
                entity.ToTable("FBPRODUCT");

                entity.Property(e => e.AdminNote).HasMaxLength(4000);

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CustomerNote).HasMaxLength(500);

                entity.Property(e => e.Height).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Length).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ManufacturerPartNumber).HasMaxLength(400);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(400);

                entity.Property(e => e.NameCustom).HasMaxLength(400);

                entity.Property(e => e.OriginCustom).HasMaxLength(400);

                entity.Property(e => e.Price).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.PriceCustom).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.ProductUnit).HasMaxLength(50);

                entity.Property(e => e.QtyPerUnit).HasDefaultValueSql("((-1))");

                entity.Property(e => e.Tax).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Weight).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Width).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.PackageDetail)
                    .WithMany(p => p.Fbproduct)
                    .HasForeignKey(d => d.PackageDetailId)
                    .HasConstraintName("FK_FBPRODUCT_FBPACKAGEDETAIL");

                entity.HasOne(d => d.Package)
                    .WithMany(p => p.Fbproduct)
                    .HasForeignKey(d => d.PackageId)
                    .HasConstraintName("FK_FBPRODUCT_FBPACKAGE");
            });

            modelBuilder.Entity<Feedback>(entity =>
            {
                entity.ToTable("FEEDBACK");

                entity.Property(e => e.ContainerName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FlightCode).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Note).HasMaxLength(1000);

                entity.Property(e => e.OrderCode).HasMaxLength(50);

                entity.Property(e => e.Owner).HasMaxLength(50);

                entity.Property(e => e.ShippingRouteCode).HasMaxLength(50);

                entity.Property(e => e.Supporter).HasMaxLength(50);

                entity.Property(e => e.Title).HasMaxLength(255);

                entity.Property(e => e.Tracking).HasMaxLength(255);

                entity.Property(e => e.WarehouseCode).HasMaxLength(255);

                entity.Property(e => e.Weight).HasColumnType("decimal(18, 0)");
            });

            modelBuilder.Entity<Freeze>(entity =>
            {
                entity.ToTable("FREEZE");

                entity.Property(e => e.AccountId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Hash)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Ref)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RefType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("AUC_PRODUCT");

                entity.Property(e => e.Status).HasComment("1: đang tạm giữ, 0 huỷ tạm giữ");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("BID_VIP,BID,PAY");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.WalletId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Wallet)
                    .WithMany(p => p.Freeze)
                    .HasForeignKey(d => d.WalletId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FREEZE_WALLET");
            });

            modelBuilder.Entity<FreezeAcc>(entity =>
            {
                entity.ToTable("FREEZE_ACC");

                entity.Property(e => e.AccCredited).HasMaxLength(50);

                entity.Property(e => e.AccDebit).HasMaxLength(50);

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ObjectCode).HasMaxLength(50);

                entity.Property(e => e.ObjectId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RefType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("AUC_PRODUCT");

                entity.Property(e => e.Status).HasComment("1: đang tạm giữ, 0 huỷ tạm giữ");

                entity.Property(e => e.SyncAccDate).HasColumnType("datetime");

                entity.Property(e => e.SyncAccNo).HasMaxLength(255);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("BID_VIP,BID,PAY");

                entity.Property(e => e.WalletId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Level>(entity =>
            {
                entity.HasKey(e => e.Level1);

                entity.ToTable("LEVEL");

                entity.Property(e => e.Level1)
                    .HasColumnName("Level")
                    .HasComment("Cấp độ")
                    .ValueGeneratedNever();

                entity.Property(e => e.AucFeecancel)
                    .HasColumnName("AUC_FEECANCEL")
                    .HasComment("Phí huỷ đơn Auction");

                entity.Property(e => e.AucMaxbidlink)
                    .HasColumnName("AUC_MAXBIDLINK")
                    .HasComment("Số link đấu tối đa");

                entity.Property(e => e.Cali).HasColumnName("CALI");

                entity.Property(e => e.De).HasColumnName("DE");

                entity.Property(e => e.FeeStandard).HasColumnName("FEE_STANDARD");

                entity.Property(e => e.FeeTranBulky).HasColumnName("FEE_TRAN_BULKY");

                entity.Property(e => e.Feebuy)
                    .HasColumnName("FEEBUY")
                    .HasComment("Công mua %");

                entity.Property(e => e.FeebuyAuc).HasColumnName("FEEBUY_AUC");

                entity.Property(e => e.FeebuyCn).HasColumnName("FEEBUY_CN");

                entity.Property(e => e.FeebuyGe).HasColumnName("FEEBUY_GE");

                entity.Property(e => e.FeebuyJp).HasColumnName("FEEBUY_JP");

                entity.Property(e => e.FeebuyKr).HasColumnName("FEEBUY_KR");

                entity.Property(e => e.FeebuyMer)
                    .HasColumnName("FEEBUY_MER")
                    .HasComment("Công mua %");

                entity.Property(e => e.FeebuyUk).HasColumnName("FEEBUY_UK");

                entity.Property(e => e.FeebuyUs).HasColumnName("FEEBUY_US");

                entity.Property(e => e.FeebuyVc).HasColumnName("FEEBUY_VC");

                entity.Property(e => e.Feetran)
                    .HasColumnName("FEETRAN")
                    .HasComment("Cước vận chuyển");

                entity.Property(e => e.FeetranGe).HasColumnName("FEETRAN_GE");

                entity.Property(e => e.FeetranJp).HasColumnName("FEETRAN_JP");

                entity.Property(e => e.FeetranKr).HasColumnName("FEETRAN_KR");

                entity.Property(e => e.FeetranUk).HasColumnName("FEETRAN_UK");

                entity.Property(e => e.FeetranUs).HasColumnName("FEETRAN_US");

                entity.Property(e => e.Hpc).HasColumnName("HPC");

                entity.Property(e => e.Jchiba).HasColumnName("JCHIBA");

                entity.Property(e => e.Jchiba2).HasColumnName("JCHIBA2");

                entity.Property(e => e.Kr).HasColumnName("KR");

                entity.Property(e => e.Oregon).HasColumnName("OREGON");

                entity.Property(e => e.Pcsjp).HasColumnName("PCSJP");

                entity.Property(e => e.PercentBulky).HasColumnName("PERCENT_BULKY");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasComment("Tên cấp độ");

                entity.Property(e => e.TotalPaymentYear).HasColumnName("TOTAL_PAYMENT_YEAR");

                entity.Property(e => e.Uk).HasColumnName("UK");
            });

            modelBuilder.Entity<LevelTranport>(entity =>
            {
                entity.ToTable("LEVEL_TRANPORT");

                entity.Property(e => e.Id)
                    .HasComment("Cấp độ")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedBy).HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(255);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<LevelTranportGroup>(entity =>
            {
                entity.HasKey(e => new { e.LevelId, e.GroupId });

                entity.ToTable("LEVEL_TRANPORT_GROUP");

                entity.Property(e => e.Cali).HasColumnName("CALI");

                entity.Property(e => e.De).HasColumnName("DE");

                entity.Property(e => e.GroupCode).HasMaxLength(255);

                entity.Property(e => e.Hpc).HasColumnName("HPC");

                entity.Property(e => e.Jchiba).HasColumnName("JCHIBA");

                entity.Property(e => e.Jchiba2).HasColumnName("JCHIBA2");

                entity.Property(e => e.Kr).HasColumnName("KR");

                entity.Property(e => e.Oregon).HasColumnName("OREGON");

                entity.Property(e => e.Pcsjp).HasColumnName("PCSJP");

                entity.Property(e => e.PriceAu).HasColumnName("PriceAU");

                entity.Property(e => e.PriceCn).HasColumnName("PriceCN");

                entity.Property(e => e.PriceGe).HasColumnName("PriceGE");

                entity.Property(e => e.PriceJp).HasColumnName("PriceJP");

                entity.Property(e => e.PriceKr).HasColumnName("PriceKR");

                entity.Property(e => e.PriceUs).HasColumnName("PriceUS");

                entity.Property(e => e.Uk).HasColumnName("UK");
            });

            modelBuilder.Entity<Metemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("METEMP");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.Jp).HasColumnName("JP");

                entity.Property(e => e.Jpd).HasColumnName("JPD");

                entity.Property(e => e.Shipping).HasColumnName("SHIPPING");
            });

            modelBuilder.Entity<MoneyTransactionHistory>(entity =>
            {
                entity.ToTable("MONEY_TRANSACTION_HISTORY");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AccCredited).HasMaxLength(50);

                entity.Property(e => e.AccDebit).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DebitOwner).HasMaxLength(255);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Hash)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.MappingBy).HasMaxLength(50);

                entity.Property(e => e.MappingDate).HasColumnType("datetime");

                entity.Property(e => e.Note).HasMaxLength(500);

                entity.Property(e => e.ObjectCode).HasMaxLength(50);

                entity.Property(e => e.ObjectCodeCredited).HasMaxLength(50);

                entity.Property(e => e.ObjectCodeDebit).HasMaxLength(50);

                entity.Property(e => e.ObjectId).HasMaxLength(50);

                entity.Property(e => e.ObjectType).HasMaxLength(50);

                entity.Property(e => e.ObjectTypeCredited).HasMaxLength(50);

                entity.Property(e => e.ObjectTypeDebit).HasMaxLength(50);

                entity.Property(e => e.SyncAccDate).HasColumnType("datetime");

                entity.Property(e => e.SyncAccNo).HasMaxLength(255);

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<NotifyConfig>(entity =>
            {
                entity.ToTable("NOTIFY_CONFIG");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.NotifyConfig)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NOTIFY_CONFIG_NOTIFY_CONFIG_GROUP");
            });

            modelBuilder.Entity<NotifyConfig1>(entity =>
            {
                entity.ToTable("NotifyConfig");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.GroupType).HasComment("Nhóm cấu hình (Enum: NotifyConfigGroup)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<NotifyConfigGroup>(entity =>
            {
                entity.ToTable("NOTIFY_CONFIG_GROUP");

                entity.Property(e => e.AppId)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.ToTable("ORDER");

                entity.HasIndex(e => e.Code);

                entity.HasIndex(e => e.ShippingRouteId);

                entity.HasIndex(e => e.Tracking);

                entity.Property(e => e.AccCredited).HasMaxLength(50);

                entity.Property(e => e.AccDebit).HasMaxLength(50);

                entity.Property(e => e.AccountId)
                    .HasMaxLength(50)
                    .HasComment("Sử dụng xác định thông tin khách hàng");

                entity.Property(e => e.BidAccount).HasMaxLength(255);

                entity.Property(e => e.BuyFee)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Phí mua hộ");

                entity.Property(e => e.BuyServiceFee).HasDefaultValueSql("((0))");

                entity.Property(e => e.CancelApproveBy).HasMaxLength(50);

                entity.Property(e => e.CancelApproveDate).HasColumnType("datetime");

                entity.Property(e => e.CancelBy).HasMaxLength(50);

                entity.Property(e => e.CancelDate).HasColumnType("datetime");

                entity.Property(e => e.Cod).HasColumnName("COD");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .HasComment("Mã kế toán");

                entity.Property(e => e.CompleteDate).HasColumnType("datetime");

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.CustomerAddress)
                    .HasMaxLength(255)
                    .HasComment("Địa chỉ nhận hàng");

                entity.Property(e => e.CustomerDistrict)
                    .HasMaxLength(255)
                    .HasComment("Người đặt hàng");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(255)
                    .HasComment("Tên người nhận hàng");

                entity.Property(e => e.CustomerPhone)
                    .HasMaxLength(255)
                    .HasComment("Số phone nhận hàng");

                entity.Property(e => e.CustomerProvince).HasMaxLength(255);

                entity.Property(e => e.CustomerRattingDate).HasColumnType("datetime");

                entity.Property(e => e.CustomerWard).HasMaxLength(255);

                entity.Property(e => e.DdimportType)
                    .HasColumnName("DDImportType")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveredDate).HasColumnType("datetime");

                entity.Property(e => e.DeliveryCod).HasColumnName("DeliveryCOD");

                entity.Property(e => e.DeliveryCode).HasMaxLength(50);

                entity.Property(e => e.DeliveryDate)
                    .HasColumnType("datetime")
                    .HasComment("Ngày  giao hàng");

                entity.Property(e => e.DeliveryDiscount).HasComment("% giảm phí giao hàng");

                entity.Property(e => e.DeliveryExpected)
                    .HasColumnType("datetime")
                    .HasComment("Ngày dự kiến giao hàng");

                entity.Property(e => e.DeliveryFee).HasComment("Phí giao hàng tại Việt Nam");

                entity.Property(e => e.DeliveryPartner).HasMaxLength(500);

                entity.Property(e => e.DeliveryPayType).HasComment("Phí giao hàng tại Việt Nam");

                entity.Property(e => e.DeliverySyncWh)
                    .HasColumnName("DeliverySyncWH")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeliveryType).HasComment("Hình thức giao hàng. 1. Giao hàng tiêu chuẩn 2. Giao hàng VIP");

                entity.Property(e => e.DepartureDate).HasColumnType("datetime");

                entity.Property(e => e.EstimateTime).HasColumnType("datetime");

                entity.Property(e => e.ExchangeRate).HasComment("Tỉ giá");

                entity.Property(e => e.FromRoute).HasMaxLength(50);

                entity.Property(e => e.GroupOrder).HasMaxLength(255);

                entity.Property(e => e.GuidId)
                    .HasColumnName("GuidID")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Mã tự sinh");

                entity.Property(e => e.Hight).HasComment("Chiều cao (cm)");

                entity.Property(e => e.LastAction).HasMaxLength(50);

                entity.Property(e => e.LastActionDate).HasColumnType("datetime");

                entity.Property(e => e.LastSyncWh)
                    .HasColumnName("LastSyncWH")
                    .HasColumnType("datetime");

                entity.Property(e => e.Length).HasComment("Chiều dài (cm)");

                entity.Property(e => e.Mawb).HasMaxLength(50);

                entity.Property(e => e.MinPayment)
                    .HasDefaultValueSql("((70))")
                    .HasComment("% yêu cầu thanh toán tối thiểu");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Negotiate).HasDefaultValueSql("((0))");

                entity.Property(e => e.Note).HasComment("Ghi chú");

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .HasComment("Nhân viên khai thác");

                entity.Property(e => e.OrderDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())")
                    .HasComment("Ngày mua hàng");

                entity.Property(e => e.OrderNumber).HasMaxLength(255);

                entity.Property(e => e.OrderType)
                    .HasMaxLength(50)
                    .HasComment("Kiểu đơn hàng: AUCTION | SHOPPING | RAKUTEN | AMAZON | MERCARI | TRANSPORT");

                entity.Property(e => e.Paid).HasComment("Đã thanh toán");

                entity.Property(e => e.Payer).HasMaxLength(255);

                entity.Property(e => e.PaymentAccount).HasMaxLength(255);

                entity.Property(e => e.PaymentBankNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentDuration)
                    .HasDefaultValueSql("((4))")
                    .HasComment("Thời hạn thanh toán (ngày)");

                entity.Property(e => e.PaymentType).HasComment("Phương thức thanh toán 1.Tiền mặt 2.Chuyển khoản 3.Ví Ichiba");

                entity.Property(e => e.ProcessDate).HasColumnType("datetime");

                entity.Property(e => e.ProductType).HasMaxLength(255);

                entity.Property(e => e.PurchaseAssign).HasMaxLength(255);

                entity.Property(e => e.PurchaseBy).HasMaxLength(255);

                entity.Property(e => e.PurchaseDate).HasColumnType("datetime");

                entity.Property(e => e.QuoteCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.QuoteDate).HasColumnType("datetime");

                entity.Property(e => e.RevenueDate).HasColumnType("datetime");

                entity.Property(e => e.Saler)
                    .HasMaxLength(50)
                    .HasComment("Nhân viên kinh doanh");

                entity.Property(e => e.ShippingFee).HasComment("Phí vận chuyển nội địa Nhật");

                entity.Property(e => e.ShippingFeeBy).HasMaxLength(255);

                entity.Property(e => e.ShippingFeeDate)
                    .HasColumnType("datetime")
                    .HasComment("Phụ phí");

                entity.Property(e => e.ShippingFeeToLocal).HasComment("Phí vận chuyển về VN");

                entity.Property(e => e.ShippingRouteCode).HasMaxLength(255);

                entity.Property(e => e.ShippingUnit).HasComment("Đơn giá vận chuyển");

                entity.Property(e => e.ShippingUnitGlobal).HasComment("Đơn giá vận chuyển quốc tế");

                entity.Property(e => e.State)
                    .HasMaxLength(255)
                    .HasDefaultValueSql("(N'DON_MOI')")
                    .HasComment("0: Đang xử lý 1.Chờ đặt cọc 2. Chờ mua hàng 3. Chờ tất toán 4: Đang giao hàng 5.Đã giao hàng 6: Đã huỷ");

                entity.Property(e => e.Status)
                    .HasDefaultValueSql("((1))")
                    .HasComment("0: Đang xử lý 1.Chờ đặt cọc 2. Chờ mua hàng 3. Chờ tất toán 4: Đang giao hàng 5.Đã giao hàng 6: Đã huỷ");

                entity.Property(e => e.StatusNote)
                    .HasMaxLength(255)
                    .HasComment("Ghi chú trạng thái");

                entity.Property(e => e.Supporter).HasMaxLength(50);

                entity.Property(e => e.Surcharge).HasComment("Phụ phí");

                entity.Property(e => e.SurchargeBy).HasMaxLength(255);

                entity.Property(e => e.SurchargeDate)
                    .HasColumnType("datetime")
                    .HasComment("Phụ phí");

                entity.Property(e => e.SurchargeNote).HasMaxLength(255);

                entity.Property(e => e.SurchargePay).HasMaxLength(255);

                entity.Property(e => e.SyncAccDate).HasColumnType("datetime");

                entity.Property(e => e.SyncAccNo).HasMaxLength(255);

                entity.Property(e => e.ToWarehouseCode).HasMaxLength(255);

                entity.Property(e => e.Total).HasComment("Tổng tiền");

                entity.Property(e => e.Tracking)
                    .HasMaxLength(2000)
                    .HasComment("Mã tracking dành cho khách hàng tra cứu đơn hàng");

                entity.Property(e => e.TrackingBox).HasMaxLength(50);

                entity.Property(e => e.TrackingBy).HasMaxLength(50);

                entity.Property(e => e.TrackingDate).HasColumnType("datetime");

                entity.Property(e => e.TrackingStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("1. Đặt hàng thành công. 2-Đang cập nhật. 3- Chờ khách hàng duyệt. 4- Khách hàng đã duyệ. 5-Khách hàng từ chối. 6. Đã được mua. 7 Đến kho Nhật");

                entity.Property(e => e.TrackingTranport).HasMaxLength(255);

                entity.Property(e => e.Type)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('OrderWorkflow')");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.WaitQuoteDate).HasColumnType("datetime");

                entity.Property(e => e.Warehouse).HasMaxLength(50);

                entity.Property(e => e.Weight).HasComment("Trọng lượng (gam)");

                entity.Property(e => e.WfProcess).HasColumnType("datetime");

                entity.Property(e => e.WhExporter).HasMaxLength(50);

                entity.Property(e => e.WhImporter).HasMaxLength(50);

                entity.Property(e => e.Width).HasComment("Chiều rộng (cm)");

                entity.Property(e => e.Yacomplete).HasColumnName("YAComplete");
            });

            modelBuilder.Entity<OrderCom>(entity =>
            {
                entity.ToTable("ORDER_COM");

                entity.Property(e => e.Com).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ComDate).HasColumnType("datetime");

                entity.Property(e => e.ComSource)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ComType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EmployeeId).HasMaxLength(50);

                entity.Property(e => e.OrderCode).HasMaxLength(255);
            });

            modelBuilder.Entity<OrderComGroup>(entity =>
            {
                entity.ToTable("ORDER_COM_GROUP");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EcBuyFee).HasComment("Cấu hình 1 COM = N% doanh thu công mua đơn ECOM");

                entity.Property(e => e.EcBuyFeeMoney).HasComment("Tổng tiền COM công mua ECOM");

                entity.Property(e => e.EcMinimum).HasComment("Tổng tối thiểu giá trị hàng đơn ECOM  để được tính COM");

                entity.Property(e => e.EcOpExport).HasComment("Cấu hình 1 COM = N% doanh thu xuất kho đơn ECOM");

                entity.Property(e => e.EcOpExportMoney).HasComment("Tổng tiền COM xuất kho đơn ECOM");

                entity.Property(e => e.EcOpImport).HasComment("Cấu hình 1 COM = N% doanh thu nhập kho đơn ECOM");

                entity.Property(e => e.EcOpImportMoney).HasComment("Tổng tiền COM nhập kho đơn ECOM");

                entity.Property(e => e.EcTranFee).HasComment("Cấu hình 1 COM = N% doanh thu vận chuyển đơn ECOM");

                entity.Property(e => e.EcTranFeeMoney).HasComment("Tổng tiền COM doanh thu vận chuyển đơn ECOM");

                entity.Property(e => e.EmployeeId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EmployeeName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.IctFee).HasComment("Cấu hình 1 COM = N% doanh thu đơn vận chuyển");

                entity.Property(e => e.IctFeeMoney).HasComment("Tổng tiền COM doanh thu vận chuyển đơn vận chuyển");

                entity.Property(e => e.IctMinimum).HasComment("Tổng tối thiểu giá trị doanh thu đơn vận chuyển  để được tính COM");

                entity.Property(e => e.IctOpExport).HasComment("Cấu hình 1 COM = N% doanh thu xuất kho đơn vận chuyển");

                entity.Property(e => e.IctOpExportMoney).HasComment("Tổng tiền COM xuất kho đơn vận chuyển");

                entity.Property(e => e.IctOpImport).HasComment("Cấu hình 1 COM = N% doanh thu nhập kho đơn vận chuyển");

                entity.Property(e => e.IctOpImportMoney).HasComment("Tổng tiền COM nhập kho đơn vận chuyển");

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.OpMinimum).HasComment("Tổng tối thiểu giá trị doanh thu vận chuyển");
            });

            modelBuilder.Entity<OrderComMoney>(entity =>
            {
                entity.ToTable("ORDER_COM_MONEY");

                entity.Property(e => e.ComDate).HasColumnType("datetime");

                entity.Property(e => e.ComMoneyType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ComSource)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderCode)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.OrderCom)
                    .WithMany(p => p.OrderComMoney)
                    .HasForeignKey(d => d.OrderComId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ORDER_COM_MONEY_ORDER_COM");
            });

            modelBuilder.Entity<OrderDeliverybill>(entity =>
            {
                entity.ToTable("ORDER_DELIVERYBILL");

                entity.Property(e => e.AccountId)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.BillCode)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.BillDate).HasColumnType("datetime");

                entity.Property(e => e.BillType).HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<OrderEmailNotify>(entity =>
            {
                entity.ToTable("ORDER_EMAIL_NOTIFY");

                entity.Property(e => e.AccountId).HasMaxLength(255);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.OrderCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusText).HasMaxLength(255);

                entity.Property(e => e.Receiver).HasMaxLength(255);

                entity.Property(e => e.ReceiverName).HasMaxLength(255);

                entity.Property(e => e.SendDate).HasColumnType("datetime");

                entity.Property(e => e.TrackingStatusText).HasMaxLength(255);
            });

            modelBuilder.Entity<OrderImportTemp>(entity =>
            {
                entity.ToTable("ORDER_IMPORT_TEMP");

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.CustomerName).HasMaxLength(255);

                entity.Property(e => e.OrderType).HasMaxLength(255);

                entity.Property(e => e.ShippingFee).HasMaxLength(255);

                entity.Property(e => e.Title).HasMaxLength(255);

                entity.Property(e => e.Tracking).HasMaxLength(255);
            });

            modelBuilder.Entity<OrderImportTempex>(entity =>
            {
                entity.ToTable("ORDER_IMPORT_TEMPEX");

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.CustomerCode).HasMaxLength(255);

                entity.Property(e => e.Khcode)
                    .HasColumnName("KHCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<OrderMessage>(entity =>
            {
                entity.Property(e => e.Action).HasMaxLength(255);

                entity.Property(e => e.Author).IsRequired();

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Message).IsRequired();

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderMessage)
                    .HasForeignKey(d => d.OrderId)
                    .HasConstraintName("FK_OrderMessage_Order_OrderId");
            });

            modelBuilder.Entity<OrderPackage>(entity =>
            {
                entity.ToTable("ORDER_PACKAGE");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.Height).HasComment("Chiều cao (cm)");

                entity.Property(e => e.Image).HasMaxLength(255);

                entity.Property(e => e.Length).HasComment("Chiều dài (cm)");

                entity.Property(e => e.Weight).HasComment("Trọng lượng (gam)");

                entity.Property(e => e.WeightType).HasDefaultValueSql("((1))");

                entity.Property(e => e.Width).HasComment("Chiều rộng (cm)");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderPackage)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ORDER_PACKAGE_ORDER");
            });

            modelBuilder.Entity<OrderPackageProduct>(entity =>
            {
                entity.ToTable("ORDER_PACKAGE_PRODUCT");

                entity.Property(e => e.Image).HasMaxLength(255);

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.NameCustom).HasMaxLength(255);

                entity.Property(e => e.PriceCustom).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Package)
                    .WithMany(p => p.OrderPackageProduct)
                    .HasForeignKey(d => d.PackageId)
                    .HasConstraintName("FK_ORDER_PACKAGE_PRODUCT_ORDER_PACKAGE");
            });

            modelBuilder.Entity<OrderPayimage>(entity =>
            {
                entity.ToTable("ORDER_PAYIMAGE");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PayImage)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderPayimage)
                    .HasForeignKey(d => d.OrderId)
                    .HasConstraintName("FK_ORDER_PAYIMAGE_ORDER");
            });

            modelBuilder.Entity<OrderProofPayment>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.ProofPaymentId });

                entity.ToTable("ORDER_PROOF_PAYMENT");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderProofPayment)
                    .HasForeignKey(d => d.OrderId)
                    .HasConstraintName("FK_ORDER_PROOF_PAYMENT_ORDER");

                entity.HasOne(d => d.ProofPayment)
                    .WithMany(p => p.OrderProofPayment)
                    .HasForeignKey(d => d.ProofPaymentId)
                    .HasConstraintName("FK_ORDER_PROOF_PAYMENT_PROOF_PAYMENT");
            });

            modelBuilder.Entity<OrderPurchase>(entity =>
            {
                entity.ToTable("ORDER_PURCHASE");

                entity.Property(e => e.AccCredited).HasMaxLength(50);

                entity.Property(e => e.AccDebit).HasMaxLength(50);

                entity.Property(e => e.AccountId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ActionBy).HasMaxLength(50);

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasColumnType("datetime");

                entity.Property(e => e.ObjectCodeCredited).HasMaxLength(50);

                entity.Property(e => e.ObjectCodeDebit).HasMaxLength(50);

                entity.Property(e => e.ObjectTypeCredited).HasMaxLength(50);

                entity.Property(e => e.ObjectTypeDebit).HasMaxLength(50);

                entity.Property(e => e.OrderCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductImage).HasMaxLength(2000);

                entity.Property(e => e.ProductLink).HasMaxLength(2000);

                entity.Property(e => e.ProductTitle).HasMaxLength(500);

                entity.Property(e => e.SurchargeNote).HasMaxLength(255);

                entity.Property(e => e.SyncAccDate).HasColumnType("datetime");

                entity.Property(e => e.SyncAccNo).HasMaxLength(255);

                entity.Property(e => e.Temp).HasMaxLength(50);

                entity.Property(e => e.Type).HasMaxLength(50);
            });

            modelBuilder.Entity<OrderPurchaseLog>(entity =>
            {
                entity.ToTable("ORDER_PURCHASE_LOG");

                entity.Property(e => e.ActionBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.ActionType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderPurchaseLog)
                    .HasForeignKey(d => d.OrderId)
                    .HasConstraintName("FK_ORDER_PURCHASE_LOG_ORDER");
            });

            modelBuilder.Entity<OrderRevenue>(entity =>
            {
                entity.ToTable("ORDER_REVENUE");

                entity.Property(e => e.AccCredited).HasMaxLength(50);

                entity.Property(e => e.AccDebit).HasMaxLength(50);

                entity.Property(e => e.AccountId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Mawb).HasMaxLength(50);

                entity.Property(e => e.ObjectCodeCredited).HasMaxLength(50);

                entity.Property(e => e.ObjectCodeDebit).HasMaxLength(50);

                entity.Property(e => e.ObjectTypeCredited).HasMaxLength(50);

                entity.Property(e => e.ObjectTypeDebit).HasMaxLength(50);

                entity.Property(e => e.OrderCode)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OrderType).HasMaxLength(255);

                entity.Property(e => e.ProductImage).HasMaxLength(2000);

                entity.Property(e => e.ProductLink).HasMaxLength(2000);

                entity.Property(e => e.ProductTitle).HasMaxLength(500);

                entity.Property(e => e.RevenueDate).HasColumnType("datetime");

                entity.Property(e => e.SupporterId).HasMaxLength(50);

                entity.Property(e => e.SurchargeNote).HasMaxLength(255);

                entity.Property(e => e.SyncAccDate).HasColumnType("datetime");

                entity.Property(e => e.SyncAccNo).HasMaxLength(255);

                entity.Property(e => e.Tracking).HasMaxLength(2000);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderRevenue)
                    .HasForeignKey(d => d.OrderId)
                    .HasConstraintName("FK_ORDER_REVENUE_ORDER");
            });

            modelBuilder.Entity<OrderService>(entity =>
            {
                entity.ToTable("ORDER_SERVICE");

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedWarehouseCode).HasMaxLength(255);

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.Icon).HasMaxLength(255);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Unit).HasMaxLength(255);

                entity.Property(e => e.WarehouseCode).HasMaxLength(255);
            });

            modelBuilder.Entity<OrderServiceMapping>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.OrderServiceId });

                entity.ToTable("ORDER_SERVICE_MAPPING");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PricePaymentBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderServiceMapping)
                    .HasForeignKey(d => d.OrderId)
                    .HasConstraintName("FK_ORDER_SERVICE_MAPPING_ORDER");

                entity.HasOne(d => d.OrderService)
                    .WithMany(p => p.OrderServiceMapping)
                    .HasForeignKey(d => d.OrderServiceId)
                    .HasConstraintName("FK_ORDER_SERVICE_MAPPING_ORDER_SERVICE");
            });

            modelBuilder.Entity<OrderTracking>(entity =>
            {
                entity.ToTable("ORDER_TRACKING");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.FromWarehouseCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Note).HasMaxLength(1000);

                entity.Property(e => e.NotifyDate).HasColumnType("datetime");

                entity.Property(e => e.PackageCode).HasMaxLength(500);

                entity.Property(e => e.Status).HasComment("0. Đặt hàng thành công 1. Đã cọc thanh toán 2. Hàng đang chuyển tới kho Nhật 3. Hàng về kho ViệtNam 4.Tất toán 5.Giao hàng 6.Đã giao hàng 7.Huỷ");

                entity.Property(e => e.ToWarehouseCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderTracking)
                    .HasForeignKey(d => d.OrderId)
                    .HasConstraintName("FK_ORDER_TRACKING_ORDER");
            });

            modelBuilder.Entity<Orderdetail>(entity =>
            {
                entity.ToTable("ORDERDETAIL");

                entity.Property(e => e.Amount)
                    .HasDefaultValueSql("((1))")
                    .HasComment("Số lượng");

                entity.Property(e => e.AmountUnit)
                    .HasMaxLength(50)
                    .HasComment("Đơn vị số lượng");

                entity.Property(e => e.BarCode).HasMaxLength(255);

                entity.Property(e => e.BidAccount).HasMaxLength(255);

                entity.Property(e => e.BuyFee).HasComment("Công mua (%)");

                entity.Property(e => e.Code).HasMaxLength(250);

                entity.Property(e => e.DownloadDate).HasColumnType("datetime");

                entity.Property(e => e.ExchangeRate).HasComment("Tỉ giá");

                entity.Property(e => e.Hight).HasComment("Chiều cao (cm)");

                entity.Property(e => e.Lenght).HasComment("Chiều dài (cm)");

                entity.Property(e => e.Note)
                    .HasMaxLength(1000)
                    .HasComment("Ghi chú");

                entity.Property(e => e.NoteOrder).HasMaxLength(1000);

                entity.Property(e => e.OrderDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OrderId).HasComment("Mã đơn hàng");

                entity.Property(e => e.PaymentAccount).HasMaxLength(255);

                entity.Property(e => e.PaymentDuration).HasDefaultValueSql("((6))");

                entity.Property(e => e.PreviewImage)
                    .HasMaxLength(1000)
                    .HasComment("Ảnh sản phẩm");

                entity.Property(e => e.Price).HasComment("Giá sản phẩm (yên)");

                entity.Property(e => e.ProAttribute).HasColumnType("ntext");

                entity.Property(e => e.ProductLink).HasMaxLength(4000);

                entity.Property(e => e.ProductName)
                    .HasMaxLength(250)
                    .HasComment("Tên hàng");

                entity.Property(e => e.ProductOrigin).HasMaxLength(250);

                entity.Property(e => e.ProductType).HasMaxLength(50);

                entity.Property(e => e.Ref)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RefType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ShippingFee).HasComment("Phí vận chuyển nội địa (yên)");

                entity.Property(e => e.ShippingFeeBy).HasMaxLength(255);

                entity.Property(e => e.ShippingFeeDate)
                    .HasColumnType("datetime")
                    .HasComment("Phụ phí");

                entity.Property(e => e.Status)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0. Đang xử lý 1. Hàng sẵn sàng 2. Hết hàng");

                entity.Property(e => e.Surcharge).HasComment("Phụ phí");

                entity.Property(e => e.Tax)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Thuế tại Nhật %");

                entity.Property(e => e.TrackingNumber)
                    .HasMaxLength(255)
                    .HasComment("Mã vận chuyển nội địa Nhật");

                entity.Property(e => e.Weight).HasComment("Trọng lượng (gam)");

                entity.Property(e => e.Width).HasComment("Chiều rộng (cm)");
            });

            modelBuilder.Entity<PackageTracking>(entity =>
            {
                entity.ToTable("PACKAGE_TRACKING");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.FromWarehouseCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Note).HasMaxLength(1000);

                entity.Property(e => e.NotifyDate).HasColumnType("datetime");

                entity.Property(e => e.ToWarehouseCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tracking)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Payforbuyer>(entity =>
            {
                entity.ToTable("PAYFORBUYER");

                entity.Property(e => e.AccCredited).HasMaxLength(50);

                entity.Property(e => e.AccDebit).HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Ftcode)
                    .HasColumnName("FTCode")
                    .HasMaxLength(50);

                entity.Property(e => e.Note).HasMaxLength(500);

                entity.Property(e => e.ObjectCodeCredited).HasMaxLength(50);

                entity.Property(e => e.ObjectCodeDebit).HasMaxLength(50);

                entity.Property(e => e.ObjectTypeCredited).HasMaxLength(50);

                entity.Property(e => e.ObjectTypeDebit).HasMaxLength(50);

                entity.Property(e => e.PayDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessDate).HasColumnType("datetime");

                entity.Property(e => e.SupplierCode).HasMaxLength(255);

                entity.Property(e => e.SupplierId).HasMaxLength(255);

                entity.Property(e => e.SyncAccDate).HasColumnType("datetime");

                entity.Property(e => e.SyncAccNo).HasMaxLength(255);
            });

            modelBuilder.Entity<Payment>(entity =>
            {
                entity.ToTable("PAYMENT");

                entity.Property(e => e.AccountId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApproveBy).HasMaxLength(50);

                entity.Property(e => e.ApproveDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasComment("Mô tả (hệ thống tạo)");

                entity.Property(e => e.Hash)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Note)
                    .HasMaxLength(255)
                    .HasComment("Ghi chú thay đổi trạng thái");

                entity.Property(e => e.PaymentForm)
                    .HasMaxLength(255)
                    .HasDefaultValueSql("(N'WALLET')")
                    .HasComment("Hình thức thanh toán  WALLET, ATM, BANKING, CASH");

                entity.Property(e => e.PaymentType)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasComment("PAY_ORDER | CANCEL_ORDER");

                entity.Property(e => e.ProcessDate).HasColumnType("datetime");

                entity.Property(e => e.Ref)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.RefCode).HasMaxLength(255);

                entity.Property(e => e.RefType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("ORDER");

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'KHOI_TAO')");

                entity.Property(e => e.Status).HasComment("0. Chờ xử lý  1. Đã thanh toán  2. Huỷ thanh toán 3.Duyệt thanh toán");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'PAYMENT_WORKFLOW')");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.WalletId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Ví tiền");

                entity.HasOne(d => d.Wallet)
                    .WithMany(p => p.Payment)
                    .HasForeignKey(d => d.WalletId)
                    .HasConstraintName("FK_PAYMENT_WALLET");
            });

            modelBuilder.Entity<PaymentAccount>(entity =>
            {
                entity.ToTable("PAYMENT_ACCOUNT");

                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<PaymentMessage>(entity =>
            {
                entity.ToTable("PAYMENT_MESSAGE");

                entity.Property(e => e.Action).HasMaxLength(255);

                entity.Property(e => e.Author).IsRequired();

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Payment)
                    .WithMany(p => p.PaymentMessage)
                    .HasForeignKey(d => d.PaymentId)
                    .HasConstraintName("FK_PAYMENT_MESSAGE_PAYMENT_MESSAGE");
            });

            modelBuilder.Entity<ProductOrigin>(entity =>
            {
                entity.ToTable("PRODUCT_ORIGIN");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Title).HasMaxLength(255);
            });

            modelBuilder.Entity<ProductType>(entity =>
            {
                entity.ToTable("PRODUCT_TYPE");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.Elements).HasMaxLength(4000);

                entity.Property(e => e.ElementsEn)
                    .HasColumnName("Elements_EN")
                    .HasMaxLength(4000);

                entity.Property(e => e.ElementsJa)
                    .HasColumnName("Elements_JA")
                    .HasMaxLength(4000);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.PriceStandardGe).HasColumnName("PriceStandard_GE");

                entity.Property(e => e.PriceStandardJp).HasColumnName("PriceStandard_JP");

                entity.Property(e => e.PriceStandardKr).HasColumnName("PriceStandard_KR");

                entity.Property(e => e.PriceStandardUk).HasColumnName("PriceStandard_UK");

                entity.Property(e => e.PriceStandardUs).HasColumnName("PriceStandard_US");

                entity.Property(e => e.Title).HasMaxLength(255);

                entity.Property(e => e.TitleEn)
                    .HasColumnName("Title_EN")
                    .HasMaxLength(255);

                entity.Property(e => e.TitleJa)
                    .HasColumnName("Title_JA")
                    .HasMaxLength(255);

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.ProductType)
                    .HasForeignKey(d => d.GroupId)
                    .HasConstraintName("FK_PRODUCT_TYPE_PRODUCT_TYPE_GROUP");
            });

            modelBuilder.Entity<ProductTypeGroup>(entity =>
            {
                entity.ToTable("PRODUCT_TYPE_GROUP");

                entity.Property(e => e.Cali).HasColumnName("CALI");

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.De).HasColumnName("DE");

                entity.Property(e => e.Hpc).HasColumnName("HPC");

                entity.Property(e => e.Jchiba).HasColumnName("JCHIBA");

                entity.Property(e => e.Jchiba2).HasColumnName("JCHIBA2");

                entity.Property(e => e.Kr).HasColumnName("KR");

                entity.Property(e => e.Oregon).HasColumnName("OREGON");

                entity.Property(e => e.Pcsjp).HasColumnName("PCSJP");

                entity.Property(e => e.PercentCali)
                    .HasColumnName("PercentCALI")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PercentDe)
                    .HasColumnName("PercentDE")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PercentHpc)
                    .HasColumnName("PercentHPC")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PercentJchiba)
                    .HasColumnName("PercentJCHIBA")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PercentJchiba2)
                    .HasColumnName("PercentJCHIBA2")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PercentKr)
                    .HasColumnName("PercentKR")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PercentOregon)
                    .HasColumnName("PercentOREGON")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PercentPcsjp)
                    .HasColumnName("PercentPCSJP")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PercentUk)
                    .HasColumnName("PercentUK")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PercentWkrysl)
                    .HasColumnName("PercentWKRYSL")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PercentWrk01)
                    .HasColumnName("PercentWRK01")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PercentWrkr)
                    .HasColumnName("PercentWRKR")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PriceAu).HasColumnName("PriceAU");

                entity.Property(e => e.PriceCn).HasColumnName("PriceCN");

                entity.Property(e => e.PriceGe).HasColumnName("PriceGE");

                entity.Property(e => e.PriceJp).HasColumnName("PriceJP");

                entity.Property(e => e.PriceKr).HasColumnName("PriceKR");

                entity.Property(e => e.PriceUs).HasColumnName("PriceUS");

                entity.Property(e => e.Rkr).HasColumnName("RKR");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.TitleEn)
                    .HasColumnName("Title_EN")
                    .HasMaxLength(255);

                entity.Property(e => e.TitleJa)
                    .HasColumnName("Title_JA")
                    .HasMaxLength(255);

                entity.Property(e => e.Uk).HasColumnName("UK");

                entity.Property(e => e.Wkrysl).HasColumnName("WKRYSL");

                entity.Property(e => e.Wrk01).HasColumnName("WRK01");
            });

            modelBuilder.Entity<ProofPayment>(entity =>
            {
                entity.ToTable("PROOF_PAYMENT");

                entity.Property(e => e.AccountId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Image).HasMaxLength(500);
            });

            modelBuilder.Entity<PurchaseReport>(entity =>
            {
                entity.ToTable("PURCHASE_REPORT");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.SyncBy).HasMaxLength(50);

                entity.Property(e => e.SyncDate).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Type).HasMaxLength(50);
            });

            modelBuilder.Entity<PurchaseReportData>(entity =>
            {
                entity.ToTable("PURCHASE_REPORT_DATA");

                entity.Property(e => e.AccountId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ActionBy).HasMaxLength(50);

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CancelBy).HasMaxLength(50);

                entity.Property(e => e.CancelDate).HasColumnType("datetime");

                entity.Property(e => e.CareBy).HasMaxLength(50);

                entity.Property(e => e.OrderCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PaymentBy).HasMaxLength(50);

                entity.Property(e => e.PaymentDate).HasColumnType("datetime");

                entity.Property(e => e.PaymentType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductImage).HasMaxLength(2000);

                entity.Property(e => e.ProductLink).HasMaxLength(2000);

                entity.Property(e => e.ProductTitle).HasMaxLength(500);

                entity.Property(e => e.SurchargeNote).HasMaxLength(255);

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.Warehouse).HasMaxLength(50);

                entity.HasOne(d => d.Report)
                    .WithMany(p => p.PurchaseReportData)
                    .HasForeignKey(d => d.ReportId)
                    .HasConstraintName("FK_PURCHASE_REPORT_DATA_PURCHASE_REPORT");
            });

            modelBuilder.Entity<QueueCustomercare>(entity =>
            {
                entity.ToTable("QUEUE_CUSTOMERCARE");

                entity.Property(e => e.AccountId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CareBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<ShippingJpcompany>(entity =>
            {
                entity.ToTable("SHIPPING_JPCOMPANY");

                entity.Property(e => e.Id).HasMaxLength(255);

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(2550);

                entity.Property(e => e.TrackingContains).HasMaxLength(250);

                entity.Property(e => e.TrackingEnd).HasMaxLength(250);

                entity.Property(e => e.TrakingStart).HasMaxLength(250);
            });

            modelBuilder.Entity<Successfulbid>(entity =>
            {
                entity.ToTable("SUCCESSFULBID");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AccountId).HasMaxLength(50);

                entity.Property(e => e.BidTime).HasColumnType("datetime");

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedOrder).HasDefaultValueSql("((0))");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndDateAndTime)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Images).IsUnicode(false);

                entity.Property(e => e.JpyRate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.LastMessage)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Order).ValueGeneratedOnAdd();

                entity.Property(e => e.PaymentStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.PreviewImage)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SellerId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Tax).HasDefaultValueSql("((0))");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.YauserName)
                    .IsRequired()
                    .HasColumnName("YAUserName")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YauserNameBidSystem)
                    .HasColumnName("YAUserNameBidSystem")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Supplier>(entity =>
            {
                entity.ToTable("SUPPLIER");

                entity.Property(e => e.AccountId).HasMaxLength(50);

                entity.Property(e => e.Address).HasMaxLength(255);

                entity.Property(e => e.BankBranch).HasMaxLength(255);

                entity.Property(e => e.BankName).HasMaxLength(255);

                entity.Property(e => e.BankNumber).HasMaxLength(255);

                entity.Property(e => e.BankProvince).HasMaxLength(255);

                entity.Property(e => e.BeginBalanceDate).HasColumnType("datetime");

                entity.Property(e => e.Code)
                    .HasMaxLength(255)
                    .HasComment("Mã KH/NCC");

                entity.Property(e => e.Commune)
                    .HasMaxLength(255)
                    .HasComment("Xã/Phưởng");

                entity.Property(e => e.Country)
                    .HasMaxLength(255)
                    .HasComment("Quốc gia");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.District)
                    .HasMaxLength(255)
                    .HasComment("Huyện");

                entity.Property(e => e.Email).HasMaxLength(255);

                entity.Property(e => e.IdIssuedBy).HasMaxLength(255);

                entity.Property(e => e.IdIssuedDate).HasColumnType("datetime");

                entity.Property(e => e.Identify).HasMaxLength(255);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasComment("Tên KH/NCC");

                entity.Property(e => e.Phone).HasMaxLength(255);

                entity.Property(e => e.Province)
                    .HasMaxLength(255)
                    .HasComment("Tỉnh");

                entity.Property(e => e.RepEmail).HasMaxLength(255);

                entity.Property(e => e.RepMobile).HasMaxLength(255);

                entity.Property(e => e.RepPhone).HasMaxLength(255);

                entity.Property(e => e.RepTitle).HasMaxLength(255);

                entity.Property(e => e.Represent).HasMaxLength(255);

                entity.Property(e => e.SyncAccDate).HasColumnType("datetime");

                entity.Property(e => e.TaxCode).HasMaxLength(255);

                entity.Property(e => e.Uid)
                    .HasColumnName("UID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Website).HasMaxLength(255);

                entity.Property(e => e.WhCode).HasMaxLength(50);
            });

            modelBuilder.Entity<SurveyProductTypeGroup>(entity =>
            {
                entity.HasIndex(e => e.CustomerId);

                entity.HasIndex(e => e.DisplayOrder);

                entity.HasIndex(e => e.UserId);

                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.UserId).IsRequired();

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.SurveyProductTypeGroup)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_SurveyProductTypeGroups_PK_CUSTOMER");
            });

            modelBuilder.Entity<SurveyShippingRoute>(entity =>
            {
                entity.HasIndex(e => e.CustomerId);

                entity.HasIndex(e => e.DisplayOrder);

                entity.HasIndex(e => e.UserId);

                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.ShippingRouteCode)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.UserId).IsRequired();

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.SurveyShippingRoute)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_SurveyShippingRoutes_PK_CUSTOMER");
            });

            modelBuilder.Entity<SyncBankTransactionHistory>(entity =>
            {
                entity.ToTable("SYNC_BANK_TRANSACTION_HISTORY");

                entity.Property(e => e.AccCredited).HasMaxLength(50);

                entity.Property(e => e.AccDebit).HasMaxLength(50);

                entity.Property(e => e.AccountNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BankType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreditOwner).HasMaxLength(255);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Ftcode)
                    .HasColumnName("FTCode")
                    .HasMaxLength(255);

                entity.Property(e => e.MappingBy).HasMaxLength(50);

                entity.Property(e => e.MappingDate).HasColumnType("datetime");

                entity.Property(e => e.Note).HasMaxLength(500);

                entity.Property(e => e.ObjectCodeCredited).HasMaxLength(50);

                entity.Property(e => e.ObjectCodeDebit).HasMaxLength(50);

                entity.Property(e => e.ObjectTypeCredited).HasMaxLength(50);

                entity.Property(e => e.ObjectTypeDebit).HasMaxLength(50);

                entity.Property(e => e.SyncAccDate).HasColumnType("datetime");

                entity.Property(e => e.SyncAccNo).HasMaxLength(255);

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionType).HasMaxLength(50);
            });

            modelBuilder.Entity<TrainProtype>(entity =>
            {
                entity.ToTable("TRAIN_PROTYPE");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ProductName).HasMaxLength(255);

                entity.Property(e => e.ProductType).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewRandonNumber>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_RandonNumber");
            });

            modelBuilder.Entity<Wallet>(entity =>
            {
                entity.ToTable("WALLET");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<WalletTrans>(entity =>
            {
                entity.ToTable("WALLET_TRANS");

                entity.Property(e => e.AccountId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Amount).HasComment("Số tiền");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Hash)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.RefId).HasComment("Mã tham chiếu");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Nạp tiền, rút tiền, thanh toán (deposit,withdrawal,pay,freeze)");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.WalletId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Tên ví");

                entity.HasOne(d => d.Wallet)
                    .WithMany(p => p.WalletTrans)
                    .HasForeignKey(d => d.WalletId)
                    .HasConstraintName("FK_WALLET_TRANS_WALLET");
            });

            modelBuilder.Entity<Withdrawal>(entity =>
            {
                entity.ToTable("WITHDRAWAL");

                entity.Property(e => e.AccountId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Amount).HasComment("Số tiền");

                entity.Property(e => e.BankAccountName).HasMaxLength(255);

                entity.Property(e => e.BankBranch).HasMaxLength(255);

                entity.Property(e => e.BankContent).HasMaxLength(500);

                entity.Property(e => e.BankDate).HasColumnType("datetime");

                entity.Property(e => e.BankName).HasMaxLength(255);

                entity.Property(e => e.BankNumber).HasMaxLength(255);

                entity.Property(e => e.BankProvince).HasMaxLength(255);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.ConfirmStatus).HasComment("TT xác nhận (0. Chờ xác nhận 1. Đã xác nhận)");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Ftcode)
                    .HasColumnName("FTCode")
                    .HasMaxLength(50);

                entity.Property(e => e.Hash).IsRequired();

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Note).HasMaxLength(500);

                entity.Property(e => e.ProcessDate).HasColumnType("datetime");

                entity.Property(e => e.ProofImage).HasMaxLength(255);

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'KHOI_TAO')");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'WITHDRAWAL_WORKFLOW')");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.WalletId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WithDrawalStatus).HasComment("TT rút tiền (0. Chờ xử lý 1.Đã chuyển tiền  2. Đã huỷ )");

                entity.Property(e => e.WithDrawalType)
                    .HasMaxLength(50)
                    .HasComment("BANK | ICHIBA");

                entity.HasOne(d => d.Wallet)
                    .WithMany(p => p.Withdrawal)
                    .HasForeignKey(d => d.WalletId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WITHDRAWAL_WALLET");
            });

            modelBuilder.Entity<WithdrawalMessage>(entity =>
            {
                entity.ToTable("WITHDRAWAL_MESSAGE");

                entity.Property(e => e.Action).HasMaxLength(255);

                entity.Property(e => e.Author).IsRequired();

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.WithDrawal)
                    .WithMany(p => p.WithdrawalMessage)
                    .HasForeignKey(d => d.WithDrawalId)
                    .HasConstraintName("FK_WITHDRAWAL_MESSAGE_WITHDRAWAL");
            });

            modelBuilder.Entity<WorkItem>(entity =>
            {
                entity.Property(e => e.TriggerName).IsRequired();

                entity.Property(e => e.WorkflowType).IsRequired();
            });

            modelBuilder.Entity<Workflow>(entity =>
            {
                entity.Property(e => e.State).IsRequired();

                entity.Property(e => e.Type).IsRequired();
            });

            modelBuilder.Entity<WorkflowHistory>(entity =>
            {
                entity.Property(e => e.FromState).IsRequired();

                entity.Property(e => e.ToState).IsRequired();

                entity.HasOne(d => d.Workflow)
                    .WithMany(p => p.WorkflowHistory)
                    .HasForeignKey(d => d.WorkflowId);
            });

            modelBuilder.Entity<WorkflowVariable>(entity =>
            {
                entity.Property(e => e.Content).IsRequired();

                entity.Property(e => e.Type).IsRequired();

                entity.HasOne(d => d.Workflow)
                    .WithMany(p => p.WorkflowVariable)
                    .HasForeignKey(d => d.WorkflowId);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}